/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,13],$V2=[1,14],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,9],$V7=[1,12],$V8=[1,22],$V9=[1,24],$Va=[1,35],$Vb=[2,17],$Vc=[1,5],$Vd=[1,44],$Ve=[1,40],$Vf=[1,42],$Vg=[1,43],$Vh=[1,45],$Vi=[1,46],$Vj=[1,47],$Vk=[1,48],$Vl=[1,49],$Vm=[1,51],$Vn=[7,23],$Vo=[1,62],$Vp=[1,63],$Vq=[1,64],$Vr=[1,65],$Vs=[1,66],$Vt=[1,67],$Vu=[7,28,41,42,43,44,45,46,65,81,82,83,85,86,87,88,89,90],$Vv=[2,5,12,14,17,18,19,20,21,22,25,39,59,62,64,65,68,69,71,72,73,74,76,77,79],$Vw=[1,93],$Vx=[7,28,41,42,65,81,82,83,85,86,87,88,89,90],$Vy=[7,28,65,81,82,83,85,86,87,88,89,90],$Vz=[7,28,41,42,44,46,65,81,82,83,85,86,87,88,89,90],$VA=[1,123],$VB=[1,125],$VC=[1,121],$VD=[1,134],$VE=[1,127],$VF=[1,128],$VG=[1,129],$VH=[1,130],$VI=[1,131],$VJ=[1,133],$VK=[1,132],$VL=[2,5,14,17,18,19,20,21,22,25],$VM=[2,12,14,17,18,19,20,21,22,39,59,62,64,68,69,71,72,73,74,76,77,79],$VN=[1,162],$VO=[1,188],$VP=[1,187],$VQ=[1,205],$VR=[1,206],$VS=[1,207],$VT=[2,12,14,17,18,19,20,21,22,59,62,64,68,69,71,72,73,74,76,77,79],$VU=[28,65],$VV=[1,228],$VW=[1,229],$VX=[1,230],$VY=[1,231],$VZ=[1,232],$V_=[1,233],$V$=[28,65,81,82,83],$V01=[1,282],$V11=[1,283],$V21=[2,12,14,17,18,19,20,21,22,39,59,61,62,64,68,69,71,72,73,74,76,77,79],$V31=[1,318],$V41=[12,64,68],$V51=[12,64,68,77];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"sentencias_iniciales":4,"EOF":5,"\\n":6,"R_PUNTOCOMA":7,"asignacion":8,"declaracion":9,"metodo":10,"funcion":11,"R_LDER":12,"lista_id":13,"IDENTIFICADOR":14,"R_COMA":15,"tipo_dato":16,"R_INT":17,"R_DOUBLE":18,"R_CHAR":19,"R_BOOLEAN":20,"R_STRING":21,"R_CONST":22,"R_IGUAL_ASIG":23,"expresion":24,"R_VOID":25,"R_PIZ":26,"parametros":27,"R_PDER":28,"R_LIZ":29,"sentencias_metodos_funciones":30,"control_if":31,"control_switch":32,"sentencia_for":33,"sentencia_while":34,"sentencia_do_while":35,"sentencia_imprimir":36,"sentencia_imprimir_ln":37,"sentencia_tipo_de":38,"sentencias_return":39,"sentencia_return":40,"R_RESTA":41,"R_SUMA":42,"R_POTENCIA":43,"R_DIVISION":44,"R_MODULO":45,"R_POR":46,"valor":47,"R_AUMENTO":48,"R_DECREMENTO":49,"ENTERO":50,"DECIMAL":51,"CADENA":52,"CARACTER":53,"BOOLEANO":54,"if":55,"control_else_if":56,"else_if":57,"else":58,"R_IF":59,"condiciones":60,"R_ELSE":61,"R_SWITCH":62,"lista_casos":63,"R_CASE":64,"R_DOSPUNTOS":65,"sentencias_switch":66,"sentencia_break":67,"R_DEFAULT":68,"R_FOR":69,"sentencias_ciclos":70,"R_WHILE":71,"R_DO":72,"R_PRINT":73,"R_RETURN":74,"sentencia_return_funcion":75,"R_TYPEOF":76,"R_BREAK":77,"sentencia_continue":78,"R_CONTINUE":79,"condicion":80,"R_YCONDICIONAL":81,"R_OCONDICIONAL":82,"R_XOR":83,"R_NEGADO":84,"R_MAYORIGUAL":85,"R_MENORIGUAL":86,"R_MAYOR":87,"R_MENOR":88,"R_IGUALCOMPARATIVO":89,"R_NOIGUAL":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"\\n",7:"R_PUNTOCOMA",12:"R_LDER",14:"IDENTIFICADOR",15:"R_COMA",17:"R_INT",18:"R_DOUBLE",19:"R_CHAR",20:"R_BOOLEAN",21:"R_STRING",22:"R_CONST",23:"R_IGUAL_ASIG",25:"R_VOID",26:"R_PIZ",28:"R_PDER",29:"R_LIZ",39:"sentencias_return",41:"R_RESTA",42:"R_SUMA",43:"R_POTENCIA",44:"R_DIVISION",45:"R_MODULO",46:"R_POR",48:"R_AUMENTO",49:"R_DECREMENTO",50:"ENTERO",51:"DECIMAL",52:"CADENA",53:"CARACTER",54:"BOOLEANO",59:"R_IF",61:"R_ELSE",62:"R_SWITCH",64:"R_CASE",65:"R_DOSPUNTOS",68:"R_DEFAULT",69:"R_FOR",71:"R_WHILE",72:"R_DO",73:"R_PRINT",74:"R_RETURN",76:"R_TYPEOF",77:"R_BREAK",79:"R_CONTINUE",81:"R_YCONDICIONAL",82:"R_OCONDICIONAL",83:"R_XOR",84:"R_NEGADO",85:"R_MAYORIGUAL",86:"R_MENORIGUAL",87:"R_MAYOR",88:"R_MENOR",89:"R_IGUALCOMPARATIVO",90:"R_NOIGUAL"},
productions_: [0,[3,2],[3,2],[3,2],[3,2],[4,2],[4,2],[4,2],[4,2],[4,1],[4,1],[4,1],[4,1],[4,2],[4,2],[4,2],[13,3],[13,1],[16,1],[16,1],[16,1],[16,1],[16,1],[9,6],[9,5],[9,4],[9,3],[9,6],[9,5],[9,4],[9,3],[8,4],[10,8],[10,7],[10,7],[10,6],[11,8],[11,7],[11,7],[11,6],[11,8],[11,7],[11,7],[11,6],[27,4],[27,2],[30,2],[30,2],[30,2],[30,2],[30,2],[30,2],[30,2],[30,2],[30,2],[30,2],[30,2],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,2],[30,2],[30,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,1],[24,1],[24,3],[47,2],[47,2],[47,2],[47,2],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[31,1],[31,2],[56,2],[56,1],[56,1],[55,7],[55,6],[57,8],[57,7],[58,4],[58,3],[32,7],[32,6],[63,6],[63,5],[63,5],[63,4],[63,3],[66,2],[66,2],[66,2],[66,2],[66,2],[66,2],[66,2],[66,2],[66,2],[66,2],[66,2],[66,2],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,2],[66,2],[66,2],[33,11],[33,11],[33,10],[33,10],[34,7],[34,6],[35,8],[35,7],[36,5],[37,5],[40,2],[75,3],[38,5],[38,4],[67,2],[78,2],[70,2],[70,2],[70,2],[70,2],[70,2],[70,2],[70,2],[70,2],[70,2],[70,2],[70,2],[70,2],[70,2],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,2],[70,2],[70,2],[60,3],[60,3],[60,3],[60,2],[60,3],[60,1],[60,3],[80,3],[80,3],[80,3],[80,3],[80,3],[80,3],[80,2],[80,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    
    
    var aux2 = tablaErroresLexicos;
    var aux3 = tablaErroresSintacticos;
    var aux4 = tablaVariables;
    htmlRecolectado = "";
    tablaErroresLexicos = [];
    tablaErroresSintacticos = [];
    tablaVariables = [];

    if(aux2.length || aux3.length){
        return {"ast":null,"erroresLexicos":aux2,"erroresSintacticos":aux3,"tablaVariables":null};
    }

       return {"ast":$$[$0-1],"erroresLexicos":aux2,"erroresSintacticos":aux3,"tablaVariables":aux4};    
    
break;
case 2:
 


        tablaErroresSintacticos.push({'sintactico':yytext,'linea':this._$.first_line,'columna':this._$.first_column});  
        
        var aux2 = tablaErroresLexicos;
        var aux3 = tablaErroresSintacticos;
        var aux4 = tablaVariables;
        htmlRecolectado = "";
        tablaErroresLexicos = [];
        tablaErroresSintacticos = [];
        tablaVariables = [];

        if(aux2.length || aux3.length){
            return {"ast":null,"erroresLexicos":aux2,"erroresSintacticos":aux3,"tablaVariables":null};
        }

       return {"ast":$$[$0-1],"erroresLexicos":aux2,"erroresSintacticos":aux3,"tablaVariables":aux4};



    
break;
case 3:


        
        tablaErroresSintacticos.push({'sintactico':yytext,'linea':this._$.first_line,'columna':this._$.first_column});  
    
        var aux2 = tablaErroresLexicos;
        var aux3 = tablaErroresSintacticos;
        var aux4 = tablaVariables;
        htmlRecolectado = "";
        tablaErroresLexicos = [];
        tablaErroresSintacticos = [];
        tablaVariables = [];

        if(aux2.length || aux3.length){
            return {"ast":null,"erroresLexicos":aux2,"erroresSintacticos":aux3,"tablaVariables":null};
        }

       return {"ast":$$[$0-1],"erroresLexicos":aux2,"erroresSintacticos":aux3,"tablaVariables":aux4};    
    
break;
case 4:



        tablaErroresSintacticos.push({'sintactico':yytext,'linea':this._$.first_line,'columna':this._$.first_column});  
    
        var aux2 = tablaErroresLexicos;
        var aux3 = tablaErroresSintacticos;
        var aux4 = tablaVariables;
        htmlRecolectado = "";
        tablaErroresLexicos = [];
        tablaErroresSintacticos = [];
        tablaVariables = [];

        if(aux2.length || aux3.length){
            return {"ast":null,"erroresLexicos":aux2,"erroresSintacticos":aux3,"tablaVariables":null};
        }

       return {"ast":$$[$0-1],"erroresLexicos":aux2,"erroresSintacticos":aux3,"tablaVariables":aux4};    
    
break;
case 5: case 6: case 7: case 8:
$$[$0].push($$[$0-1]); this.$ = $$[$0]; 
break;
case 9: case 10: case 11: case 12:
this.$ = [$$[$0]];
break;
case 13: case 14: case 15: case 68: case 69: case 70: case 80: case 178: case 179: case 180:
 

        tablaErroresSintacticos.push({'sintactico':yytext,'linea':this._$.first_line,'columna':this._$.first_column});  

        
break;
case 16:
 $$[$0].push($$[$0-2]); $$[$0].push($$[$0-1]); this.$ = $$[$0] ;
break;
case 17: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 94: case 95: case 121: case 122: case 123: case 124: case 125: case 126: case 127: case 128: case 129: case 130: case 131: case 132: case 165: case 166: case 167: case 168: case 169: case 170: case 171: case 172: case 173: case 174: case 175: case 176: case 177:
 this.$ = [$$[$0]]; 
break;
case 18: case 19: case 20: case 21: case 22: case 85: case 86: case 87: case 88: case 89: case 91:
 this.$ = $$[$0]; 
break;
case 23: case 27:

            tablaVariables.push({'constante':$$[$0-5],'tipo':$$[$0-4],'identificadores':$$[$0-3],'linea':this._$.first_line});
            this.$ = sentenciasAPI.declaracionConstanteConAsignacion($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
        
break;
case 24: case 28:

            tablaVariables.push({'tipo':$$[$0-4],'identificadores':$$[$0-3],'linea':this._$.first_line});
            this.$ = sentenciasAPI.declaracionConAsignacion($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
        
break;
case 25: case 29:

            tablaVariables.push({'constante':$$[$0-3], 'tipo':$$[$0-2],'identificadores':$$[$0-1],'linea':this._$.first_line});
            this.$ = sentenciasAPI.declaracionConstanteSimple($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
        
break;
case 26: case 30:

            tablaVariables.push({'tipo':$$[$0-2],'identificadores':$$[$0-1],'linea':this._$.first_line});
            this.$ = sentenciasAPI.declaracionSimple($$[$0-2],$$[$0-1],$$[$0]);
        
break;
case 31:
 
    this.$ = sentenciasAPI.asignacion($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 32:
 this.$ = sentenciasAPI.metodo($$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 33:
 this.$ = sentenciasAPI.metodo($$[$0-6],$$[$0-5],$$[$0-4],null,$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 34:
 this.$ = sentenciasAPI.metodo($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 35:
 this.$ = sentenciasAPI.metodo($$[$0-5],$$[$0-4],$$[$0-3],null,$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 36: case 40:
 this.$ = sentenciasAPI.funcion($$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 37: case 41:
 this.$ = sentenciasAPI.funcion($$[$0-6],$$[$0-5],$$[$0-4],null,$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 38: case 42:
 this.$ = sentenciasAPI.funcion($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 39: case 43:
 this.$ = sentenciasAPI.funcion($$[$0-5],$$[$0-4],$$[$0-3],null,$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 44:
 $$[$0].push($$[$0-3]); $$[$0].push($$[$0-2]); this.$ = $$[$0] 
break;
case 45:
 this.$ = [$$[$0-1],$$[$0]];
break;
case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 93: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 152: case 153: case 154: case 155: case 156: case 157: case 158: case 159: case 160: case 161: case 162: case 163: case 164:
 $$[$0].push($$[$0-1]); this.$ = $$[$0]; 
break;
case 71: case 72: case 73: case 74: case 75: case 76:
 this.$ = sentenciasAPI.expresionOperacion($$[$0-2],$$[$0-1],$$[$0]); 
break;
case 77:
 this.$ = sentenciasAPI.expresionParentesis($$[$0-2],$$[$0-1],$$[$0]); 
break;
case 78: case 79:
 this.$ = $$[$0];
break;
case 81: case 82: case 83: case 84:
 this.$ = [$$[$0-1],$$[$0]]
break;
case 90:
 this.$ = $$[$0];  
break;
case 92:
 this.$ = [$$[$0-1],$$[$0]]; 
break;
case 96:
 this.$ = sentenciasAPI.ifSimple($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 97:
 this.$ = sentenciasAPI.ifSimple($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 98:
 this.$ = sentenciasAPI.elseIfSimple($$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 99:
 this.$ = sentenciasAPI.elseIfSimple($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 100:
 this.$ = sentenciasAPI.elseSimple($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 101:
 this.$ = sentenciasAPI.elseSimple($$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 102:
 this.$ = sentenciasAPI.controlSwitch($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 103:
 this.$ = sentenciasAPI.controlSwitch($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 104:
 $$[$0].push(sentenciasAPI.casoSimple($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1])); this.$ = $$[$0]; 
break;
case 105:
 $$[$0].push(sentenciasAPI.casoSimple($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null)); this.$ = $$[$0] 
break;
case 106:
 this.$ = sentenciasAPI.casoSimple($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 107:
 this.$ = sentenciasAPI.casoSimple($$[$0-3],$$[$0-2],$$[$0-1],$$[$0],null); 
break;
case 108:
 this.$ = sentenciasAPI.defaultSimple($$[$0-2],$$[$0-1],$$[$0]); 
break;
case 133: case 134: case 135:
 

                    tablaErroresSintacticos.push({'sintactico':yytext,'linea':this._$.first_line,'columna':this._$.first_column});  

                    
break;
case 136:
 this.$ = sentenciasAPI.cicloFor($$[$0-10],$$[$0-9],$$[$0-8],null,$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 137:
 this.$ = sentenciasAPI.cicloFor($$[$0-10],$$[$0-9],null,$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 138:
 this.$ = sentenciasAPI.cicloFor($$[$0-9],$$[$0-8],$$[$0-7],null,$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 139:
 this.$ = sentenciasAPI.cicloFor($$[$0-9],$$[$0-8],null,$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 140:
 this.$ = sentenciasAPI.cicloWhile($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 141:
 this.$ = sentenciasAPI.cicloWhile($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 142:
 this.$ = sentenciasAPI.cicloDoWhile($$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 143:
 this.$ = sentenciasAPI.cicloDoWhile($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 144: case 145:
 this.$ = sentenciasAPI.sentenciaImprimir($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 146:
 this.$ = sentenciasAPI.sentenciaReturn($$[$0-1],$$[$0]); 
break;
case 147:
 this.$ = sentenciasAPI.returnFuncion($$[$0-2],$$[$0-1],$$[$0]); 
break;
case 148:
 this.$ = sentenciasAPI.returnFuncion($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 149:
 this.$ = sentenciasAPI.returnFuncion($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 150:
 this.$ = sentenciasAPI.sentenciaBreak($$[$0-1],$$[$0]); 
break;
case 151:
 this.$ = sentenciasAPI.sentenciaContinue($$[$0-1],$$[$0]); 
break;
case 181: case 182: case 183:
 this.$ = sentenciasAPI.condicionesOperacion($$[$0-2],$$[$0-1],$$[$0]); 
break;
case 184:
 this.$ = sentenciasAPI.condicionesNegacion($$[$0-1],$$[$0]); 
break;
case 185:
 this.$ = sentenciasAPI.condicionesParentesis($$[$0-2],$$[$0-1],$$[$0]); 
break;
case 186:
 this.$ =  $$[$0]; 
break;
case 187:
 

                tablaErroresSintacticos.push({'sintactico':yytext,'linea':this._$.first_line,'columna':this._$.first_column});  

            
break;
case 188: case 189: case 190: case 191: case 192: case 193:
 this.$ = sentenciasAPI.condicionComparacion($$[$0-2],$$[$0-1],$$[$0]); 
break;
case 194:
 this.$ = sentenciasAPI.condicionNegada($$[$0-1],$$[$0]); 
break;
case 195:
 

            tablaErroresSintacticos.push({'sintactico':yytext,'linea':this._$.first_line,'columna':this._$.first_column});  

        
break;
}
},
table: [{2:[1,3],3:1,4:2,8:4,9:5,10:6,11:7,13:8,14:$V0,16:10,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,25:$V7},{1:[3]},{5:[1,18]},{5:[1,21],6:[1,19],7:[1,20],12:$V8},{2:$V9,4:23,5:[2,9],8:4,9:5,10:6,11:7,13:8,14:$V0,16:10,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,25:$V7},{2:$V9,4:25,5:[2,10],8:4,9:5,10:6,11:7,13:8,14:$V0,16:10,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,25:$V7},{2:$V9,4:26,5:[2,11],8:4,9:5,10:6,11:7,13:8,14:$V0,16:10,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,25:$V7},{2:$V9,4:27,5:[2,12],8:4,9:5,10:6,11:7,13:8,14:$V0,16:10,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,25:$V7},{23:[1,28]},{14:[1,30],16:29,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5},{13:31,14:[1,32]},{13:33,14:[1,34],15:$Va,23:$Vb},{14:[1,36]},{14:[2,18]},{14:[2,19]},{14:[2,20]},{14:[2,21]},{14:[2,22]},{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,3]),{1:[2,4]},{5:[2,15]},{5:[2,5]},{6:[1,38],7:[1,37],12:$V8},{5:[2,6]},{5:[2,7]},{5:[2,8]},{14:$Vd,24:39,26:$Ve,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl},{13:50,14:$Vm},{13:52,14:$Vm},{7:[1,54],23:[1,53]},o($Vn,$Vb,{15:$Va,26:[1,55]}),{7:[1,57],23:[1,56]},o($Vn,$Vb,{15:$Va,26:[1,58]}),{13:59,14:$Vm},{26:[1,60]},{5:[2,13]},{5:[2,14]},{7:[1,61],41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt},{2:[1,69],14:$Vd,24:68,26:$Ve,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl},o($Vu,[2,78]),{14:[1,70]},{14:[1,71]},o($Vu,[2,88],{48:[1,72],49:[1,73]}),o($Vu,[2,85]),o($Vu,[2,86]),o($Vu,[2,87]),o($Vu,[2,89]),o($Vu,[2,90]),{7:[1,75],23:[1,74]},o($Vn,$Vb,{15:$Va}),{7:[1,77],23:[1,76]},{14:$Vd,24:78,26:$Ve,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl},o($Vv,[2,26]),{16:81,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,27:79,28:[1,80]},{14:$Vd,24:82,26:$Ve,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl},o($Vv,[2,30]),{16:81,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,27:83,28:[1,84]},o($Vn,[2,16]),{16:81,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,27:85,28:[1,86]},o($Vv,[2,31]),{14:$Vd,24:87,26:$Ve,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl},{14:$Vd,24:88,26:$Ve,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl},{14:$Vd,24:89,26:$Ve,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl},{14:$Vd,24:90,26:$Ve,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl},{14:$Vd,24:91,26:$Ve,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl},{14:$Vd,24:92,26:$Ve,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl},{28:$Vw,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt},{28:[1,94]},o($Vu,[2,81]),o($Vu,[2,82]),o($Vu,[2,83]),o($Vu,[2,84]),{14:$Vd,24:95,26:$Ve,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl},o($Vv,[2,25]),{14:$Vd,24:96,26:$Ve,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl},o($Vv,[2,29]),{7:[1,97],41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt},{28:[1,98]},{29:[1,99]},{14:[1,100]},{7:[1,101],41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt},{28:[1,102]},{29:[1,103]},{28:[1,104]},{29:[1,105]},o($Vx,[2,71],{43:$Vq,44:$Vr,45:$Vs,46:$Vt}),o($Vx,[2,72],{43:$Vq,44:$Vr,45:$Vs,46:$Vt}),o($Vy,[2,73],{41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt}),o($Vz,[2,74],{43:$Vq,45:$Vs}),o($Vy,[2,75],{41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt}),o($Vz,[2,76],{43:$Vq,45:$Vs}),o($Vu,[2,77]),o($Vu,[2,80]),{7:[1,106],41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt},{7:[1,107],41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt},o($Vv,[2,24]),{29:[1,108]},{2:$VA,8:112,9:111,12:[1,110],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,30:109,31:113,32:114,33:115,34:116,35:117,36:118,37:119,38:120,39:$VC,40:122,55:126,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK},{15:[1,135],28:[2,45]},o($Vv,[2,28]),{29:[1,136]},{2:$VA,8:112,9:111,12:[1,138],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,30:137,31:113,32:114,33:115,34:116,35:117,36:118,37:119,38:120,39:$VC,40:122,55:126,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK},{29:[1,139]},{2:$VA,8:112,9:111,12:[1,141],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,30:140,31:113,32:114,33:115,34:116,35:117,36:118,37:119,38:120,39:$VC,40:122,55:126,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK},o($Vv,[2,23]),o($Vv,[2,27]),{2:$VA,8:112,9:111,12:[1,143],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,30:142,31:113,32:114,33:115,34:116,35:117,36:118,37:119,38:120,39:$VC,40:122,55:126,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK},{12:[1,144]},o($VL,[2,39]),{2:$VA,8:112,9:111,12:[2,57],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,30:145,31:113,32:114,33:115,34:116,35:117,36:118,37:119,38:120,39:$VC,40:122,55:126,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK},{2:$VA,8:112,9:111,12:[2,58],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,30:146,31:113,32:114,33:115,34:116,35:117,36:118,37:119,38:120,39:$VC,40:122,55:126,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK},{2:$VA,8:112,9:111,12:[2,59],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,30:147,31:113,32:114,33:115,34:116,35:117,36:118,37:119,38:120,39:$VC,40:122,55:126,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK},{2:$VA,8:112,9:111,12:[2,60],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,30:148,31:113,32:114,33:115,34:116,35:117,36:118,37:119,38:120,39:$VC,40:122,55:126,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK},{2:$VA,8:112,9:111,12:[2,61],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,30:149,31:113,32:114,33:115,34:116,35:117,36:118,37:119,38:120,39:$VC,40:122,55:126,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK},{2:$VA,8:112,9:111,12:[2,62],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,30:150,31:113,32:114,33:115,34:116,35:117,36:118,37:119,38:120,39:$VC,40:122,55:126,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK},{2:$VA,8:112,9:111,12:[2,63],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,30:151,31:113,32:114,33:115,34:116,35:117,36:118,37:119,38:120,39:$VC,40:122,55:126,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK},{2:$VA,8:112,9:111,12:[2,64],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,30:152,31:113,32:114,33:115,34:116,35:117,36:118,37:119,38:120,39:$VC,40:122,55:126,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK},{2:$VA,8:112,9:111,12:[2,65],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,30:153,31:113,32:114,33:115,34:116,35:117,36:118,37:119,38:120,39:$VC,40:122,55:126,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK},{2:$VA,8:112,9:111,12:[2,66],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,30:154,31:113,32:114,33:115,34:116,35:117,36:118,37:119,38:120,39:$VC,40:122,55:126,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK},{2:$VA,8:112,9:111,13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,30:155,31:113,32:114,33:115,34:116,35:117,36:118,37:119,38:120,39:$VC,40:122,55:126,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK},{12:[2,67]},{6:[1,157],7:[1,156],12:[1,158]},{13:31,14:$Vm},{13:33,14:$Vm,15:$Va,23:$Vb},o($VM,[2,91],{56:159,57:160,58:161,61:$VN}),{29:[1,163]},{26:[1,164]},{26:[1,165]},{29:[1,166]},{26:[1,167]},{26:[1,168]},{7:[1,169]},{26:[1,170]},{16:81,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,27:171},{2:$VA,8:112,9:111,12:[1,173],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,30:172,31:113,32:114,33:115,34:116,35:117,36:118,37:119,38:120,39:$VC,40:122,55:126,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK},{12:[1,174]},o($VL,[2,43]),{2:$VA,8:112,9:111,12:[1,176],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,30:175,31:113,32:114,33:115,34:116,35:117,36:118,37:119,38:120,39:$VC,40:122,55:126,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK},{12:[1,177]},o($VL,[2,35]),{12:[1,178]},o($VL,[2,38]),o($VL,[2,37]),{12:[2,46]},{12:[2,47]},{12:[2,48]},{12:[2,49]},{12:[2,50]},{12:[2,51]},{12:[2,52]},{12:[2,53]},{12:[2,54]},{12:[2,55]},{12:[2,56]},{12:[2,68]},{12:[2,69]},{12:[2,70]},o($VM,[2,92]),o($VM,[2,94],{57:160,58:161,56:179,61:$VN}),o($VM,[2,95]),{29:[1,181],59:[1,180]},{14:$Vd,24:182,26:$Ve,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl},{8:184,9:183,13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6},{14:$Vd,24:189,26:$VO,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,60:185,80:186,84:$VP},{2:$VQ,8:193,9:192,12:[1,191],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,31:194,32:195,33:196,34:197,35:198,36:199,37:200,38:201,40:202,55:126,59:$VD,62:$VE,67:203,69:$VF,70:190,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR,78:204,79:$VS},{14:$Vd,24:208,26:$Ve,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl},{14:$Vd,24:209,26:$Ve,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl},o($VT,[2,146]),{14:$Vd,24:189,26:$VO,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,60:210,80:186,84:$VP},{28:[2,44]},{12:[1,211]},o($VL,[2,42]),o($VL,[2,41]),{12:[1,212]},o($VL,[2,34]),o($VL,[2,33]),o($VL,[2,36]),o($VM,[2,93]),{26:[1,213]},{2:$VA,8:112,9:111,12:[1,215],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,30:214,31:113,32:114,33:115,34:116,35:117,36:118,37:119,38:120,39:$VC,40:122,55:126,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK},{28:[1,216],41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt},{65:[1,217]},{65:[1,218]},{28:[1,219]},o($VU,[2,186],{81:[1,220],82:[1,221],83:[1,222]}),{14:$Vd,24:224,26:$VO,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,60:223,80:186,84:$VP},{2:[1,226],14:$Vd,24:227,26:$VO,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,60:225,80:186,84:$VP},{41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_},{12:[1,234]},{71:[1,235]},{2:$VQ,8:193,9:192,12:[2,165],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,31:194,32:195,33:196,34:197,35:198,36:199,37:200,38:201,40:202,55:126,59:$VD,62:$VE,67:203,69:$VF,70:236,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR,78:204,79:$VS},{2:$VQ,8:193,9:192,12:[2,166],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,31:194,32:195,33:196,34:197,35:198,36:199,37:200,38:201,40:202,55:126,59:$VD,62:$VE,67:203,69:$VF,70:237,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR,78:204,79:$VS},{2:$VQ,8:193,9:192,12:[2,167],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,31:194,32:195,33:196,34:197,35:198,36:199,37:200,38:201,40:202,55:126,59:$VD,62:$VE,67:203,69:$VF,70:238,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR,78:204,79:$VS},{2:$VQ,8:193,9:192,12:[2,168],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,31:194,32:195,33:196,34:197,35:198,36:199,37:200,38:201,40:202,55:126,59:$VD,62:$VE,67:203,69:$VF,70:239,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR,78:204,79:$VS},{2:$VQ,8:193,9:192,12:[2,169],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,31:194,32:195,33:196,34:197,35:198,36:199,37:200,38:201,40:202,55:126,59:$VD,62:$VE,67:203,69:$VF,70:240,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR,78:204,79:$VS},{2:$VQ,8:193,9:192,12:[2,170],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,31:194,32:195,33:196,34:197,35:198,36:199,37:200,38:201,40:202,55:126,59:$VD,62:$VE,67:203,69:$VF,70:241,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR,78:204,79:$VS},{2:$VQ,8:193,9:192,12:[2,171],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,31:194,32:195,33:196,34:197,35:198,36:199,37:200,38:201,40:202,55:126,59:$VD,62:$VE,67:203,69:$VF,70:242,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR,78:204,79:$VS},{2:$VQ,8:193,9:192,12:[2,172],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,31:194,32:195,33:196,34:197,35:198,36:199,37:200,38:201,40:202,55:126,59:$VD,62:$VE,67:203,69:$VF,70:243,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR,78:204,79:$VS},{2:$VQ,8:193,9:192,12:[2,173],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,31:194,32:195,33:196,34:197,35:198,36:199,37:200,38:201,40:202,55:126,59:$VD,62:$VE,67:203,69:$VF,70:244,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR,78:204,79:$VS},{2:$VQ,8:193,9:192,12:[2,174],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,31:194,32:195,33:196,34:197,35:198,36:199,37:200,38:201,40:202,55:126,59:$VD,62:$VE,67:203,69:$VF,70:245,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR,78:204,79:$VS},{2:$VQ,8:193,9:192,12:[2,175],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,31:194,32:195,33:196,34:197,35:198,36:199,37:200,38:201,40:202,55:126,59:$VD,62:$VE,67:203,69:$VF,70:246,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR,78:204,79:$VS},{2:$VQ,8:193,9:192,12:[2,176],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,31:194,32:195,33:196,34:197,35:198,36:199,37:200,38:201,40:202,55:126,59:$VD,62:$VE,67:203,69:$VF,70:247,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR,78:204,79:$VS},{2:$VQ,8:193,9:192,12:[2,177],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,31:194,32:195,33:196,34:197,35:198,36:199,37:200,38:201,40:202,55:126,59:$VD,62:$VE,67:203,69:$VF,70:248,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR,78:204,79:$VS},{6:[1,250],7:[1,249],12:[1,251]},{7:[1,252]},{7:[1,253]},{28:[1,254],41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt},{28:[1,255],41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt},{28:[1,256]},o($VL,[2,40]),o($VL,[2,32]),{14:$Vd,24:189,26:$VO,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,60:257,80:186,84:$VP},{12:[1,258]},o($VM,[2,101]),{29:[1,259]},{14:$Vd,24:189,26:$VO,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,60:260,80:186,84:$VP},{14:$Vd,24:189,26:$VO,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,60:261,80:186,84:$VP},{29:[1,262]},{14:$Vd,24:189,26:$VO,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,60:263,80:186,84:$VP},{14:$Vd,24:189,26:$VO,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,60:264,80:186,84:$VP},{14:$Vd,24:189,26:$VO,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,60:265,80:186,84:$VP},o($VU,[2,184]),o($V$,[2,194],{41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_}),{28:[1,266]},{28:[1,267]},{28:$Vw,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,85:$VV,86:$VW,87:$VX,88:$VY,89:$VZ,90:$V_},{14:$Vd,24:268,26:$Ve,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl},{14:$Vd,24:269,26:$Ve,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl},{14:$Vd,24:270,26:$Ve,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl},{14:$Vd,24:271,26:$Ve,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl},{14:$Vd,24:272,26:$Ve,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl},{14:$Vd,24:273,26:$Ve,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl},{71:[1,274]},{26:[1,275]},{12:[2,152]},{12:[2,153]},{12:[2,154]},{12:[2,155]},{12:[2,156]},{12:[2,157]},{12:[2,158]},{12:[2,159]},{12:[2,160]},{12:[2,161]},{12:[2,162]},{12:[2,163]},{12:[2,164]},{12:[2,178]},{12:[2,179]},{12:[2,180]},o($VT,[2,150]),o([2,12,14,17,18,19,20,21,22,59,62,69,71,72,73,74,76,77,79],[2,151]),{7:[1,276]},o($VM,[2,149],{7:[1,277]}),{29:[1,278]},{28:[1,279]},o($VM,[2,100]),{12:[1,281],63:280,64:$V01,68:$V11},{65:[1,284]},{65:[1,285]},{2:$VQ,8:193,9:192,12:[1,287],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,31:194,32:195,33:196,34:197,35:198,36:199,37:200,38:201,40:202,55:126,59:$VD,62:$VE,67:203,69:$VF,70:286,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR,78:204,79:$VS},o($VU,[2,181]),o($VU,[2,182]),o($VU,[2,183]),o($VU,[2,185]),o([28,41,42,43,44,45,46,65,81,82,83,85,86,87,88,89,90],[2,187]),o($V$,[2,188],{41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt}),o($V$,[2,189],{41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt}),o($V$,[2,190],{41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt}),o($V$,[2,191],{41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt}),o($V$,[2,192],{41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt}),o($V$,[2,193],{41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt}),{26:[1,288]},{14:$Vd,24:189,26:$VO,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,60:289,80:186,84:$VP},o($VM,[2,144]),o($VM,[2,148]),{2:$VA,8:112,9:111,12:[1,291],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,30:290,31:113,32:114,33:115,34:116,35:117,36:118,37:119,38:120,39:$VC,40:122,55:126,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK},{29:[1,292]},{12:[1,293]},o($VM,[2,103]),{14:$Vd,24:294,26:$Ve,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl},{65:[1,295]},{14:$Vd,24:296,26:$Ve,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl},{14:$Vd,24:297,26:$Ve,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl},{12:[1,298]},o($VM,[2,141]),{14:$Vd,24:189,26:$VO,47:41,48:$Vf,49:$Vg,50:$Vh,51:$Vi,52:$Vj,53:$Vk,54:$Vl,60:299,80:186,84:$VP},{28:[1,300]},{12:[1,301]},o($V21,[2,97]),{2:$VA,8:112,9:111,12:[1,303],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,30:302,31:113,32:114,33:115,34:116,35:117,36:118,37:119,38:120,39:$VC,40:122,55:126,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK},o($VM,[2,102]),{41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,65:[1,304]},{2:$V31,8:307,9:306,13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,31:308,32:309,33:310,34:311,35:312,36:313,37:314,38:315,40:316,55:126,59:$VD,62:$VE,66:305,67:317,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR},{28:[1,319],41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt},{28:[1,320],41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt},o($VM,[2,140]),{28:[1,321]},o($VM,[2,143]),o($V21,[2,96]),{12:[1,322]},o($V21,[2,99]),{2:$V31,8:307,9:306,13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,31:308,32:309,33:310,34:311,35:312,36:313,37:314,38:315,40:316,55:126,59:$VD,62:$VE,66:323,67:317,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR},{12:[2,108]},o($V41,[2,121],{13:8,16:124,55:126,9:306,8:307,31:308,32:309,33:310,34:311,35:312,36:313,37:314,38:315,40:316,67:317,66:324,2:$V31,14:$VB,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR}),o($V41,[2,122],{13:8,16:124,55:126,9:306,8:307,31:308,32:309,33:310,34:311,35:312,36:313,37:314,38:315,40:316,67:317,66:325,2:$V31,14:$VB,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR}),o($V41,[2,123],{13:8,16:124,55:126,9:306,8:307,31:308,32:309,33:310,34:311,35:312,36:313,37:314,38:315,40:316,67:317,66:326,2:$V31,14:$VB,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR}),o($V41,[2,124],{13:8,16:124,55:126,9:306,8:307,31:308,32:309,33:310,34:311,35:312,36:313,37:314,38:315,40:316,67:317,66:327,2:$V31,14:$VB,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR}),o($V41,[2,125],{13:8,16:124,55:126,9:306,8:307,31:308,32:309,33:310,34:311,35:312,36:313,37:314,38:315,40:316,67:317,66:328,2:$V31,14:$VB,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR}),o($V41,[2,126],{13:8,16:124,55:126,9:306,8:307,31:308,32:309,33:310,34:311,35:312,36:313,37:314,38:315,40:316,67:317,66:329,2:$V31,14:$VB,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR}),o($V41,[2,127],{13:8,16:124,55:126,9:306,8:307,31:308,32:309,33:310,34:311,35:312,36:313,37:314,38:315,40:316,67:317,66:330,2:$V31,14:$VB,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR}),o($V41,[2,128],{13:8,16:124,55:126,9:306,8:307,31:308,32:309,33:310,34:311,35:312,36:313,37:314,38:315,40:316,67:317,66:331,2:$V31,14:$VB,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR}),o($V41,[2,129],{13:8,16:124,55:126,9:306,8:307,31:308,32:309,33:310,34:311,35:312,36:313,37:314,38:315,40:316,67:317,66:332,2:$V31,14:$VB,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR}),o($V41,[2,130],{13:8,16:124,55:126,9:306,8:307,31:308,32:309,33:310,34:311,35:312,36:313,37:314,38:315,40:316,67:317,66:333,2:$V31,14:$VB,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR}),o($V41,[2,131],{13:8,16:124,55:126,9:306,8:307,31:308,32:309,33:310,34:311,35:312,36:313,37:314,38:315,40:316,67:317,66:334,2:$V31,14:$VB,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR}),o($V41,[2,132],{13:8,16:124,55:126,9:306,8:307,31:308,32:309,33:310,34:311,35:312,36:313,37:314,38:315,40:316,67:317,66:335,2:$V31,14:$VB,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,59:$VD,62:$VE,69:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR}),{6:[1,337],7:[1,336],12:[1,338]},{29:[1,339]},{29:[1,340]},o($VM,[2,142]),o($V21,[2,98]),{12:[2,107],63:342,64:$V01,67:341,68:$V11,77:$VR},o($V51,[2,109]),o($V51,[2,110]),o($V51,[2,111]),o($V51,[2,112]),o($V51,[2,113]),o($V51,[2,114]),o($V51,[2,115]),o($V51,[2,116]),o($V51,[2,117]),o($V51,[2,118]),o($V51,[2,119]),o($V51,[2,120]),o($V51,[2,133]),o($V51,[2,134]),o($V51,[2,135]),{2:$VQ,8:193,9:192,12:[1,344],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,31:194,32:195,33:196,34:197,35:198,36:199,37:200,38:201,40:202,55:126,59:$VD,62:$VE,67:203,69:$VF,70:343,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR,78:204,79:$VS},{2:$VQ,8:193,9:192,12:[1,346],13:8,14:$VB,16:124,17:$V1,18:$V2,19:$V3,20:$V4,21:$V5,22:$V6,31:194,32:195,33:196,34:197,35:198,36:199,37:200,38:201,40:202,55:126,59:$VD,62:$VE,67:203,69:$VF,70:345,71:$VG,72:$VH,73:$VI,74:$VJ,76:$VK,77:$VR,78:204,79:$VS},{12:[2,106],63:347,64:$V01,68:$V11},{12:[2,105]},{12:[1,348]},o($VM,[2,138]),{12:[1,349]},o($VM,[2,139]),{12:[2,104]},o($VM,[2,136]),o($VM,[2,137])],
defaultActions: {13:[2,18],14:[2,19],15:[2,20],16:[2,21],17:[2,22],18:[2,1],21:[2,4],22:[2,15],23:[2,5],25:[2,6],26:[2,7],27:[2,8],37:[2,13],38:[2,14],122:[2,67],145:[2,46],146:[2,47],147:[2,48],148:[2,49],149:[2,50],150:[2,51],151:[2,52],152:[2,53],153:[2,54],154:[2,55],155:[2,56],156:[2,68],157:[2,69],158:[2,70],171:[2,44],236:[2,152],237:[2,153],238:[2,154],239:[2,155],240:[2,156],241:[2,157],242:[2,158],243:[2,159],244:[2,160],245:[2,161],246:[2,162],247:[2,163],248:[2,164],249:[2,178],250:[2,179],251:[2,180],305:[2,108],342:[2,105],347:[2,104]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


    yy = { };
yy.parseError = function(msg, hash) {
     doSomething();
}
parser.yy = yy;

    const sentenciasAPI = require('./sentencias').sentenciasAPI;

    let htmlRecolectado = "";

    let tablaVariables = [];

    let tablaErroresLexicos = [];

    let tablaErroresSintacticos = [];

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:console.log('const'); return 22;
break;
case 4:console.log('if'); return 59;
break;
case 5:console.log('else'); return 61;
break;
case 6:console.log('switch'); return 62;
break;
case 7:console.log('case'); return 64;
break;
case 8:console.log('break'); return 77;
break;
case 9:console.log('default'); return 68;
break;
case 10:console.log('for'); return 69;
break;
case 11:console.log('while'); return 71;
break;
case 12:console.log('do'); return 72;
break;
case 13:console.log('continue'); return 79;
break;
case 14:console.log('void'); return 25;
break;
case 15:console.log('return'); return 74;
break;
case 16:console.log('call'); return 'R_CALL';
break;
case 17:console.log('null'); return 'R_NULL';
break;
case 18:console.log('println'); return 'R_PRINTLN';
break;
case 19:console.log('print'); return 73;
break;
case 20:console.log('typeof'); return 76;
break;
case 21:console.log('int'); return 17;
break;
case 22:console.log('double'); return 18;
break;
case 23:console.log('char'); return 19;
break;
case 24:console.log('boolean'); return 20;
break;
case 25:console.log('String'); return 21;
break;
case 26:console.log('('); return 26;
break;
case 27:console.log(')'); return 28;
break;
case 28:console.log('{'); return 29;
break;
case 29:console.log('}'); return 12;
break;
case 30:console.log('++'); return 48;
break;
case 31:console.log('--'); return 49;
break;
case 32:console.log('**'); return 43;
break;
case 33:console.log('=='); return 89;
break;
case 34:console.log('>='); return 85;
break;
case 35:console.log('<='); return 86;
break;
case 36:console.log('!='); return 90;
break;
case 37:console.log('||'); return 82;
break;
case 38:console.log('&&'); return 81;
break;
case 39:console.log('+'); return 42;
break;
case 40:console.log('-'); return 41;
break;
case 41:console.log('*'); return 46;
break;
case 42:console.log('/'); return 44;
break;
case 43:console.log('%'); return 45;
break;
case 44:console.log('>'); return 87;
break;
case 45:console.log('<'); return 88;
break;
case 46:console.log('^'); return 83;
break;
case 47:console.log('!'); return 84;
break;
case 48:console.log(':'); return 65;
break;
case 49:console.log(';'); return 7;
break;
case 50:console.log(','); return 15;
break;
case 51:console.log('='); return 23;
break;
case 52:console.log('cadena'); return 52; 
break;
case 53:console.log('decimal'); return 51; 
break;
case 54:console.log('numero'); return 50;
break;
case 55:console.log('identificador'); return 14; 
break;
case 56:console.log('booleando'); return 54;
break;
case 57:console.log('caracter'); return 53;
break;
case 58:return 5;   
break;
case 59: 
                        tablaErroresLexicos.push({'lexico':yy_.yytext,'linea':yy_.yylloc.first_line,'columna':yy_.yylloc.first_column});  
                        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                        
                    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:call\b)/i,/^(?:null\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:typeof\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:String\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*\*)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\^)/i,/^(?:!)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:=)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:true|false\b)/i,/^(?:['][^\']['])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}