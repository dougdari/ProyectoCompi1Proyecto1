/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,12],$V2=[1,13],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[1,8],$V7=[1,11],$V8=[1,29],$V9=[2,11],$Va=[1,36],$Vb=[1,32],$Vc=[1,34],$Vd=[1,35],$Ve=[1,37],$Vf=[1,38],$Vg=[1,39],$Vh=[1,40],$Vi=[1,41],$Vj=[1,43],$Vk=[20,22],$Vl=[1,54],$Vm=[1,55],$Vn=[1,56],$Vo=[1,57],$Vp=[1,58],$Vq=[1,59],$Vr=[22,26,40,41,42,43,44,45,64,80,81,82,84,85,86,87,88,89],$Vs=[5,11,14,15,16,17,18,19,23,29,38,58,61,63,64,67,68,70,71,72,73,75,76,78],$Vt=[1,84],$Vu=[22,26,40,41,64,80,81,82,84,85,86,87,88,89],$Vv=[22,26,64,80,81,82,84,85,86,87,88,89],$Vw=[22,26,40,41,43,45,64,80,81,82,84,85,86,87,88,89],$Vx=[1,114],$Vy=[1,111],$Vz=[1,123],$VA=[1,116],$VB=[1,117],$VC=[1,118],$VD=[1,119],$VE=[1,120],$VF=[1,122],$VG=[1,121],$VH=[5,11,14,15,16,17,18,19,23],$VI=[11,14,15,16,17,18,19,29,38,58,61,63,67,68,70,71,72,73,75,76,78],$VJ=[1,148],$VK=[1,174],$VL=[1,173],$VM=[1,191],$VN=[1,192],$VO=[11,14,15,16,17,18,19,29,58,61,63,67,68,70,71,72,73,75,76,78],$VP=[26,64],$VQ=[1,212],$VR=[1,213],$VS=[1,214],$VT=[1,215],$VU=[1,216],$VV=[1,217],$VW=[26,64,80,81,82],$VX=[1,262],$VY=[1,263],$VZ=[11,14,15,16,17,18,19,29,38,58,60,61,63,67,68,70,71,72,73,75,76,78],$V_=[29,63,67],$V$=[29,63,67,76];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"sentencias_iniciales":4,"EOF":5,"asignacion":6,"declaracion":7,"metodo":8,"funcion":9,"lista_id":10,"IDENTIFICADOR":11,"R_COMA":12,"tipo_dato":13,"R_INT":14,"R_DOUBLE":15,"R_CHAR":16,"R_BOOLEAN":17,"R_STRING":18,"R_CONST":19,"R_IGUAL_ASIG":20,"expresion":21,"R_PUNTOCOMA":22,"R_VOID":23,"R_PIZ":24,"parametros":25,"R_PDER":26,"R_LIZ":27,"sentencias_metodos_funciones":28,"R_LDER":29,"control_if":30,"control_switch":31,"sentencia_for":32,"sentencia_while":33,"sentencia_do_while":34,"sentencia_imprimir":35,"sentencia_imprimir_ln":36,"sentencia_tipo_de":37,"sentencias_return":38,"sentencia_return":39,"R_RESTA":40,"R_SUMA":41,"R_POTENCIA":42,"R_DIVISION":43,"R_MODULO":44,"R_POR":45,"valor":46,"R_AUMENTO":47,"R_DECREMENTO":48,"ENTERO":49,"DECIMAL":50,"CADENA":51,"CARACTER":52,"BOOLEANO":53,"if":54,"control_else_if":55,"else_if":56,"else":57,"R_IF":58,"condiciones":59,"R_ELSE":60,"R_SWITCH":61,"lista_casos":62,"R_CASE":63,"R_DOSPUNTOS":64,"sentencias_switch":65,"sentencia_break":66,"R_DEFAULT":67,"R_FOR":68,"sentencias_ciclos":69,"R_WHILE":70,"R_DO":71,"R_PRINT":72,"R_RETURN":73,"sentencia_return_funcion":74,"R_TYPEOF":75,"R_BREAK":76,"sentencia_continue":77,"R_CONTINUE":78,"condicion":79,"R_YCONDICIONAL":80,"R_OCONDICIONAL":81,"R_XOR":82,"R_NEGADO":83,"R_MAYORIGUAL":84,"R_MENORIGUAL":85,"R_MAYOR":86,"R_MENOR":87,"R_IGUALCOMPARATIVO":88,"R_NOIGUAL":89,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"IDENTIFICADOR",12:"R_COMA",14:"R_INT",15:"R_DOUBLE",16:"R_CHAR",17:"R_BOOLEAN",18:"R_STRING",19:"R_CONST",20:"R_IGUAL_ASIG",22:"R_PUNTOCOMA",23:"R_VOID",24:"R_PIZ",26:"R_PDER",27:"R_LIZ",29:"R_LDER",38:"sentencias_return",40:"R_RESTA",41:"R_SUMA",42:"R_POTENCIA",43:"R_DIVISION",44:"R_MODULO",45:"R_POR",47:"R_AUMENTO",48:"R_DECREMENTO",49:"ENTERO",50:"DECIMAL",51:"CADENA",52:"CARACTER",53:"BOOLEANO",58:"R_IF",60:"R_ELSE",61:"R_SWITCH",63:"R_CASE",64:"R_DOSPUNTOS",67:"R_DEFAULT",68:"R_FOR",70:"R_WHILE",71:"R_DO",72:"R_PRINT",73:"R_RETURN",75:"R_TYPEOF",76:"R_BREAK",78:"R_CONTINUE",80:"R_YCONDICIONAL",81:"R_OCONDICIONAL",82:"R_XOR",83:"R_NEGADO",84:"R_MAYORIGUAL",85:"R_MENORIGUAL",86:"R_MAYOR",87:"R_MENOR",88:"R_IGUALCOMPARATIVO",89:"R_NOIGUAL"},
productions_: [0,[3,2],[4,2],[4,2],[4,2],[4,2],[4,1],[4,1],[4,1],[4,1],[10,3],[10,1],[13,1],[13,1],[13,1],[13,1],[13,1],[7,6],[7,5],[7,4],[7,3],[7,6],[7,5],[7,4],[7,3],[6,4],[8,8],[8,7],[8,7],[8,6],[9,8],[9,7],[9,7],[9,6],[9,8],[9,7],[9,7],[9,6],[25,4],[25,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,1],[21,1],[46,2],[46,2],[46,2],[46,2],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[30,1],[30,2],[55,2],[55,1],[55,1],[54,7],[54,6],[56,8],[56,7],[57,4],[57,3],[31,7],[31,6],[62,6],[62,5],[62,5],[62,4],[62,3],[65,2],[65,2],[65,2],[65,2],[65,2],[65,2],[65,2],[65,2],[65,2],[65,2],[65,2],[65,2],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[32,11],[32,11],[32,10],[32,10],[33,7],[33,6],[34,8],[34,7],[35,5],[36,5],[39,2],[74,3],[37,5],[37,4],[66,2],[77,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[59,3],[59,3],[59,3],[59,2],[59,3],[59,1],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    
    
    var aux2 = tablaErroresLexicos;
    var aux3 = tablaErroresSintacticos;
    var aux4 = tablaVariables;
    htmlRecolectado = "";
    tablaErroresLexicos = [];
    tablaErroresSintacticos = [];
    tablaVariables = [];

    if(aux2.length || aux3.length){
        return {"html":aux,"ast":null,"erroresLexicos":aux2,"erroresSintacticos":aux3,"tablaVariables":null};
    }

       return {"ast":$$[$0-1],"erroresLexicos":aux2,"erroresSintacticos":aux3,"tablaVariables":aux4};    
        return $$[$0-1] 
    
break;
case 2: case 3: case 4: case 5:
$$[$0].push($$[$0-1]); this.$ = $$[$0]; 
break;
case 6: case 7: case 8: case 9:
this.$ = [$$[$0]];
break;
case 10:
 $$[$0].push($$[$0-2]); $$[$0].push($$[$0-1]); this.$ = $$[$0] ;
break;
case 11: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 84: case 85: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 119: case 120: case 121: case 122: case 152: case 153: case 154: case 155: case 156: case 157: case 158: case 159: case 160: case 161: case 162: case 163: case 164:
 this.$ = [$$[$0]]; 
break;
case 12: case 13: case 14: case 15: case 16: case 75: case 76: case 77: case 78: case 79: case 81:
 this.$ = $$[$0]; 
break;
case 17: case 21:

            tablaVariables.push({'constante':$$[$0-5],'tipo':$$[$0-4],'identificadores':$$[$0-3],'linea':this._$.first_line});
            this.$ = sentenciasAPI.declaracionConstanteConAsignacion($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
        
break;
case 18: case 22:

            tablaVariables.push({'tipo':$$[$0-4],'identificadores':$$[$0-3],'linea':this._$.first_line});
            this.$ = sentenciasAPI.declaracionConAsignacion($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
        
break;
case 19: case 23:

            tablaVariables.push({'constante':$$[$0-3], 'tipo':$$[$0-2],'identificadores':$$[$0-1],'linea':this._$.first_line});
            this.$ = sentenciasAPI.declaracionConstanteSimple($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
        
break;
case 20: case 24:

            tablaVariables.push({'tipo':$$[$0-2],'identificadores':$$[$0-1],'linea':this._$.first_line});
            this.$ = sentenciasAPI.declaracionSimple($$[$0-2],$$[$0-1],$$[$0]);
        
break;
case 25:
 
    this.$ = sentenciasAPI.asignacion($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 26:
 this.$ = sentenciasAPI.metodo($$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 27:
 this.$ = sentenciasAPI.metodo($$[$0-6],$$[$0-5],$$[$0-4],null,$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 28:
 this.$ = sentenciasAPI.metodo($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 29:
 this.$ = sentenciasAPI.metodo($$[$0-5],$$[$0-4],$$[$0-3],null,$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 30: case 34:
 this.$ = sentenciasAPI.funcion($$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 31: case 35:
 this.$ = sentenciasAPI.funcion($$[$0-6],$$[$0-5],$$[$0-4],null,$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 32: case 36:
 this.$ = sentenciasAPI.funcion($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 33: case 37:
 this.$ = sentenciasAPI.funcion($$[$0-5],$$[$0-4],$$[$0-3],null,$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 38:
 $$[$0].push($$[$0-3]); $$[$0].push($$[$0-2]); this.$ = $$[$0] 
break;
case 39:
 this.$ = [$$[$0-1],$$[$0]];
break;
case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 83: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 139: case 140: case 141: case 142: case 143: case 144: case 145: case 146: case 147: case 148: case 149: case 150: case 151:
 $$[$0].push($$[$0-1]); this.$ = $$[$0]; 
break;
case 62: case 63: case 64: case 65: case 66: case 67:
 this.$ = sentenciasAPI.expresionOperacion($$[$0-2],$$[$0-1],$$[$0]); 
break;
case 68:
 this.$ = sentenciasAPI.expresionParentesis($$[$0-2],$$[$0-1],$$[$0]); 
break;
case 69: case 70:
 this.$ = $$[$0];
break;
case 71: case 72: case 73: case 74:
 this.$ = [$$[$0-1],$$[$0]]
break;
case 80:
 this.$ = $$[$0];  
break;
case 82:
 this.$ = [$$[$0-1],$$[$0]]; 
break;
case 86:
 this.$ = sentenciasAPI.ifSimple($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 87:
 this.$ = sentenciasAPI.ifSimple($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 88:
 this.$ = sentenciasAPI.elseIfSimple($$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 89:
 this.$ = sentenciasAPI.elseIfSimple($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 90:
 this.$ = sentenciasAPI.elseSimple($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 91:
 this.$ = sentenciasAPI.elseSimple($$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 92:
 this.$ = sentenciasAPI.controlSwitch($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 93:
 this.$ = sentenciasAPI.controlSwitch($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 94:
 $$[$0].push(sentenciasAPI.casoSimple($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1])); this.$ = $$[$0]; 
break;
case 95:
 $$[$0].push(sentenciasAPI.casoSimple($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null)); this.$ = $$[$0] 
break;
case 96:
 this.$ = sentenciasAPI.casoSimple($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 97:
 this.$ = sentenciasAPI.casoSimple($$[$0-3],$$[$0-2],$$[$0-1],$$[$0],null); 
break;
case 98:
 this.$ = sentenciasAPI.defaultSimple($$[$0-2],$$[$0-1],$$[$0]); 
break;
case 123:
 this.$ = sentenciasAPI.cicloFor($$[$0-10],$$[$0-9],$$[$0-8],null,$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 124:
 this.$ = sentenciasAPI.cicloFor($$[$0-10],$$[$0-9],null,$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 125:
 this.$ = sentenciasAPI.cicloFor($$[$0-9],$$[$0-8],$$[$0-7],null,$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 126:
 this.$ = sentenciasAPI.cicloFor($$[$0-9],$$[$0-8],null,$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 127:
 this.$ = sentenciasAPI.cicloWhile($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 128:
 this.$ = sentenciasAPI.cicloWhile($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 129:
 this.$ = sentenciasAPI.cicloDoWhile($$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 130:
 this.$ = sentenciasAPI.cicloDoWhile($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 131: case 132:
 this.$ = sentenciasAPI.sentenciaImprimir($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 133:
 this.$ = sentenciasAPI.sentenciaReturn($$[$0-1],$$[$0]); 
break;
case 134:
 this.$ = sentenciasAPI.returnFuncion($$[$0-2],$$[$0-1],$$[$0]); 
break;
case 135:
 this.$ = sentenciasAPI.returnFuncion($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 136:
 this.$ = sentenciasAPI.returnFuncion($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 137:
 this.$ = sentenciasAPI.sentenciaBreak($$[$0-1],$$[$0]); 
break;
case 138:
 this.$ = sentenciasAPI.sentenciaContinue($$[$0-1],$$[$0]); 
break;
case 165: case 166: case 167:
 this.$ = sentenciasAPI.condicionesOperacion($$[$0-2],$$[$0-1],$$[$0]); 
break;
case 168:
 this.$ = sentenciasAPI.condicionesNegacion($$[$0-1],$$[$0]); 
break;
case 169:
 this.$ = sentenciasAPI.condicionesParentesis($$[$0-2],$$[$0-1],$$[$0]); 
break;
case 170:
 this.$ =  $$[$0]; 
break;
case 171: case 172: case 173: case 174: case 175: case 176:
 this.$ = sentenciasAPI.condicionComparacion($$[$0-2],$$[$0-1],$$[$0]); 
break;
case 177:
 this.$ = sentenciasAPI.condicionNegada($$[$0-1],$$[$0]); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,23:$V7},{1:[3]},{5:[1,17]},{4:18,5:[2,6],6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,23:$V7},{4:19,5:[2,7],6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,23:$V7},{4:20,5:[2,8],6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,23:$V7},{4:21,5:[2,9],6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,23:$V7},{20:[1,22]},{11:[1,24],13:23,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5},{10:25,11:[1,26]},{10:27,11:[1,28],12:$V8,20:$V9},{11:[1,30]},{11:[2,12]},{11:[2,13]},{11:[2,14]},{11:[2,15]},{11:[2,16]},{1:[2,1]},{5:[2,2]},{5:[2,3]},{5:[2,4]},{5:[2,5]},{11:$Va,21:31,24:$Vb,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi},{10:42,11:$Vj},{10:44,11:$Vj},{20:[1,45],22:[1,46]},o($Vk,$V9,{12:$V8,24:[1,47]}),{20:[1,48],22:[1,49]},o($Vk,$V9,{12:$V8,24:[1,50]}),{10:51,11:$Vj},{24:[1,52]},{22:[1,53],40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq},{11:$Va,21:60,24:$Vb,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi},o($Vr,[2,69]),{11:[1,61]},{11:[1,62]},o($Vr,[2,78],{47:[1,63],48:[1,64]}),o($Vr,[2,75]),o($Vr,[2,76]),o($Vr,[2,77]),o($Vr,[2,79]),o($Vr,[2,80]),{20:[1,65],22:[1,66]},o($Vk,$V9,{12:$V8}),{20:[1,67],22:[1,68]},{11:$Va,21:69,24:$Vb,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi},o($Vs,[2,20]),{13:72,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,25:70,26:[1,71]},{11:$Va,21:73,24:$Vb,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi},o($Vs,[2,24]),{13:72,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,25:74,26:[1,75]},o($Vk,[2,10]),{13:72,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,25:76,26:[1,77]},o($Vs,[2,25]),{11:$Va,21:78,24:$Vb,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi},{11:$Va,21:79,24:$Vb,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi},{11:$Va,21:80,24:$Vb,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi},{11:$Va,21:81,24:$Vb,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi},{11:$Va,21:82,24:$Vb,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi},{11:$Va,21:83,24:$Vb,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi},{26:$Vt,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq},o($Vr,[2,71]),o($Vr,[2,72]),o($Vr,[2,73]),o($Vr,[2,74]),{11:$Va,21:85,24:$Vb,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi},o($Vs,[2,19]),{11:$Va,21:86,24:$Vb,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi},o($Vs,[2,23]),{22:[1,87],40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq},{26:[1,88]},{27:[1,89]},{11:[1,90]},{22:[1,91],40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq},{26:[1,92]},{27:[1,93]},{26:[1,94]},{27:[1,95]},o($Vu,[2,62],{42:$Vn,43:$Vo,44:$Vp,45:$Vq}),o($Vu,[2,63],{42:$Vn,43:$Vo,44:$Vp,45:$Vq}),o($Vv,[2,64],{40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq}),o($Vw,[2,65],{42:$Vn,44:$Vp}),o($Vv,[2,66],{40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq}),o($Vw,[2,67],{42:$Vn,44:$Vp}),o($Vr,[2,68]),{22:[1,96],40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq},{22:[1,97],40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq},o($Vs,[2,18]),{27:[1,98]},{6:102,7:101,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:99,29:[1,100],30:103,31:104,32:105,33:106,34:107,35:108,36:109,37:110,38:$Vy,39:112,54:115,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG},{12:[1,124],26:[2,39]},o($Vs,[2,22]),{27:[1,125]},{6:102,7:101,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:126,29:[1,127],30:103,31:104,32:105,33:106,34:107,35:108,36:109,37:110,38:$Vy,39:112,54:115,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG},{27:[1,128]},{6:102,7:101,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:129,29:[1,130],30:103,31:104,32:105,33:106,34:107,35:108,36:109,37:110,38:$Vy,39:112,54:115,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG},o($Vs,[2,17]),o($Vs,[2,21]),{6:102,7:101,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:131,29:[1,132],30:103,31:104,32:105,33:106,34:107,35:108,36:109,37:110,38:$Vy,39:112,54:115,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG},{29:[1,133]},o($VH,[2,33]),{6:102,7:101,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:134,29:[2,51],30:103,31:104,32:105,33:106,34:107,35:108,36:109,37:110,38:$Vy,39:112,54:115,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG},{6:102,7:101,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:135,29:[2,52],30:103,31:104,32:105,33:106,34:107,35:108,36:109,37:110,38:$Vy,39:112,54:115,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG},{6:102,7:101,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:136,29:[2,53],30:103,31:104,32:105,33:106,34:107,35:108,36:109,37:110,38:$Vy,39:112,54:115,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG},{6:102,7:101,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:137,29:[2,54],30:103,31:104,32:105,33:106,34:107,35:108,36:109,37:110,38:$Vy,39:112,54:115,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG},{6:102,7:101,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:138,29:[2,55],30:103,31:104,32:105,33:106,34:107,35:108,36:109,37:110,38:$Vy,39:112,54:115,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG},{6:102,7:101,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:139,29:[2,56],30:103,31:104,32:105,33:106,34:107,35:108,36:109,37:110,38:$Vy,39:112,54:115,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG},{6:102,7:101,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:140,29:[2,57],30:103,31:104,32:105,33:106,34:107,35:108,36:109,37:110,38:$Vy,39:112,54:115,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG},{6:102,7:101,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:141,29:[2,58],30:103,31:104,32:105,33:106,34:107,35:108,36:109,37:110,38:$Vy,39:112,54:115,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG},{6:102,7:101,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:142,29:[2,59],30:103,31:104,32:105,33:106,34:107,35:108,36:109,37:110,38:$Vy,39:112,54:115,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG},{6:102,7:101,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:143,29:[2,60],30:103,31:104,32:105,33:106,34:107,35:108,36:109,37:110,38:$Vy,39:112,54:115,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG},{6:102,7:101,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:144,30:103,31:104,32:105,33:106,34:107,35:108,36:109,37:110,38:$Vy,39:112,54:115,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG},{29:[2,61]},{10:25,11:$Vj},{10:27,11:$Vj,12:$V8,20:$V9},o($VI,[2,81],{55:145,56:146,57:147,60:$VJ}),{27:[1,149]},{24:[1,150]},{24:[1,151]},{27:[1,152]},{24:[1,153]},{24:[1,154]},{22:[1,155]},{24:[1,156]},{13:72,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,25:157},{6:102,7:101,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:158,29:[1,159],30:103,31:104,32:105,33:106,34:107,35:108,36:109,37:110,38:$Vy,39:112,54:115,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG},{29:[1,160]},o($VH,[2,37]),{6:102,7:101,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:161,29:[1,162],30:103,31:104,32:105,33:106,34:107,35:108,36:109,37:110,38:$Vy,39:112,54:115,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG},{29:[1,163]},o($VH,[2,29]),{29:[1,164]},o($VH,[2,32]),o($VH,[2,31]),{29:[2,40]},{29:[2,41]},{29:[2,42]},{29:[2,43]},{29:[2,44]},{29:[2,45]},{29:[2,46]},{29:[2,47]},{29:[2,48]},{29:[2,49]},{29:[2,50]},o($VI,[2,82]),o($VI,[2,84],{56:146,57:147,55:165,60:$VJ}),o($VI,[2,85]),{27:[1,167],58:[1,166]},{11:$Va,21:168,24:$Vb,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi},{6:170,7:169,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6},{11:$Va,21:175,24:$VK,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,59:171,79:172,83:$VL},{6:179,7:178,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[1,177],30:180,31:181,32:182,33:183,34:184,35:185,36:186,37:187,39:188,54:115,58:$Vz,61:$VA,66:189,68:$VB,69:176,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM,77:190,78:$VN},{11:$Va,21:193,24:$Vb,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi},{11:$Va,21:194,24:$Vb,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi},o($VO,[2,133]),{11:$Va,21:175,24:$VK,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,59:195,79:172,83:$VL},{26:[2,38]},{29:[1,196]},o($VH,[2,36]),o($VH,[2,35]),{29:[1,197]},o($VH,[2,28]),o($VH,[2,27]),o($VH,[2,30]),o($VI,[2,83]),{24:[1,198]},{6:102,7:101,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:199,29:[1,200],30:103,31:104,32:105,33:106,34:107,35:108,36:109,37:110,38:$Vy,39:112,54:115,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG},{26:[1,201],40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq},{64:[1,202]},{64:[1,203]},{26:[1,204]},o($VP,[2,170],{80:[1,205],81:[1,206],82:[1,207]}),{11:$Va,21:209,24:$VK,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,59:208,79:172,83:$VL},{11:$Va,21:211,24:$VK,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,59:210,79:172,83:$VL},{40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV},{29:[1,218]},{70:[1,219]},{6:179,7:178,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,152],30:180,31:181,32:182,33:183,34:184,35:185,36:186,37:187,39:188,54:115,58:$Vz,61:$VA,66:189,68:$VB,69:220,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM,77:190,78:$VN},{6:179,7:178,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,153],30:180,31:181,32:182,33:183,34:184,35:185,36:186,37:187,39:188,54:115,58:$Vz,61:$VA,66:189,68:$VB,69:221,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM,77:190,78:$VN},{6:179,7:178,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,154],30:180,31:181,32:182,33:183,34:184,35:185,36:186,37:187,39:188,54:115,58:$Vz,61:$VA,66:189,68:$VB,69:222,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM,77:190,78:$VN},{6:179,7:178,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,155],30:180,31:181,32:182,33:183,34:184,35:185,36:186,37:187,39:188,54:115,58:$Vz,61:$VA,66:189,68:$VB,69:223,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM,77:190,78:$VN},{6:179,7:178,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,156],30:180,31:181,32:182,33:183,34:184,35:185,36:186,37:187,39:188,54:115,58:$Vz,61:$VA,66:189,68:$VB,69:224,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM,77:190,78:$VN},{6:179,7:178,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,157],30:180,31:181,32:182,33:183,34:184,35:185,36:186,37:187,39:188,54:115,58:$Vz,61:$VA,66:189,68:$VB,69:225,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM,77:190,78:$VN},{6:179,7:178,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,158],30:180,31:181,32:182,33:183,34:184,35:185,36:186,37:187,39:188,54:115,58:$Vz,61:$VA,66:189,68:$VB,69:226,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM,77:190,78:$VN},{6:179,7:178,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,159],30:180,31:181,32:182,33:183,34:184,35:185,36:186,37:187,39:188,54:115,58:$Vz,61:$VA,66:189,68:$VB,69:227,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM,77:190,78:$VN},{6:179,7:178,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,160],30:180,31:181,32:182,33:183,34:184,35:185,36:186,37:187,39:188,54:115,58:$Vz,61:$VA,66:189,68:$VB,69:228,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM,77:190,78:$VN},{6:179,7:178,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,161],30:180,31:181,32:182,33:183,34:184,35:185,36:186,37:187,39:188,54:115,58:$Vz,61:$VA,66:189,68:$VB,69:229,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM,77:190,78:$VN},{6:179,7:178,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,162],30:180,31:181,32:182,33:183,34:184,35:185,36:186,37:187,39:188,54:115,58:$Vz,61:$VA,66:189,68:$VB,69:230,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM,77:190,78:$VN},{6:179,7:178,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,163],30:180,31:181,32:182,33:183,34:184,35:185,36:186,37:187,39:188,54:115,58:$Vz,61:$VA,66:189,68:$VB,69:231,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM,77:190,78:$VN},{6:179,7:178,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,164],30:180,31:181,32:182,33:183,34:184,35:185,36:186,37:187,39:188,54:115,58:$Vz,61:$VA,66:189,68:$VB,69:232,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM,77:190,78:$VN},{22:[1,233]},{22:[1,234]},{26:[1,235],40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq},{26:[1,236],40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq},{26:[1,237]},o($VH,[2,34]),o($VH,[2,26]),{11:$Va,21:175,24:$VK,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,59:238,79:172,83:$VL},{29:[1,239]},o($VI,[2,91]),{27:[1,240]},{11:$Va,21:175,24:$VK,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,59:241,79:172,83:$VL},{11:$Va,21:175,24:$VK,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,59:242,79:172,83:$VL},{27:[1,243]},{11:$Va,21:175,24:$VK,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,59:244,79:172,83:$VL},{11:$Va,21:175,24:$VK,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,59:245,79:172,83:$VL},{11:$Va,21:175,24:$VK,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,59:246,79:172,83:$VL},o($VP,[2,168]),o($VW,[2,177],{40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV}),{26:[1,247]},{26:$Vt,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,84:$VQ,85:$VR,86:$VS,87:$VT,88:$VU,89:$VV},{11:$Va,21:248,24:$Vb,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi},{11:$Va,21:249,24:$Vb,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi},{11:$Va,21:250,24:$Vb,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi},{11:$Va,21:251,24:$Vb,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi},{11:$Va,21:252,24:$Vb,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi},{11:$Va,21:253,24:$Vb,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi},{70:[1,254]},{24:[1,255]},{29:[2,139]},{29:[2,140]},{29:[2,141]},{29:[2,142]},{29:[2,143]},{29:[2,144]},{29:[2,145]},{29:[2,146]},{29:[2,147]},{29:[2,148]},{29:[2,149]},{29:[2,150]},{29:[2,151]},o($VO,[2,137]),o([11,14,15,16,17,18,19,29,58,61,68,70,71,72,73,75,76,78],[2,138]),{22:[1,256]},o($VI,[2,136],{22:[1,257]}),{27:[1,258]},{26:[1,259]},o($VI,[2,90]),{29:[1,261],62:260,63:$VX,67:$VY},{64:[1,264]},{64:[1,265]},{6:179,7:178,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[1,267],30:180,31:181,32:182,33:183,34:184,35:185,36:186,37:187,39:188,54:115,58:$Vz,61:$VA,66:189,68:$VB,69:266,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM,77:190,78:$VN},o($VP,[2,165]),o($VP,[2,166]),o($VP,[2,167]),o($VP,[2,169]),o($VW,[2,171],{40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq}),o($VW,[2,172],{40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq}),o($VW,[2,173],{40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq}),o($VW,[2,174],{40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq}),o($VW,[2,175],{40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq}),o($VW,[2,176],{40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq}),{24:[1,268]},{11:$Va,21:175,24:$VK,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,59:269,79:172,83:$VL},o($VI,[2,131]),o($VI,[2,135]),{6:102,7:101,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:270,29:[1,271],30:103,31:104,32:105,33:106,34:107,35:108,36:109,37:110,38:$Vy,39:112,54:115,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG},{27:[1,272]},{29:[1,273]},o($VI,[2,93]),{11:$Va,21:274,24:$Vb,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi},{64:[1,275]},{11:$Va,21:276,24:$Vb,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi},{11:$Va,21:277,24:$Vb,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi},{29:[1,278]},o($VI,[2,128]),{11:$Va,21:175,24:$VK,46:33,47:$Vc,48:$Vd,49:$Ve,50:$Vf,51:$Vg,52:$Vh,53:$Vi,59:279,79:172,83:$VL},{26:[1,280]},{29:[1,281]},o($VZ,[2,87]),{6:102,7:101,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:282,29:[1,283],30:103,31:104,32:105,33:106,34:107,35:108,36:109,37:110,38:$Vy,39:112,54:115,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG},o($VI,[2,92]),{40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,64:[1,284]},{6:287,7:286,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,30:288,31:289,32:290,33:291,34:292,35:293,36:294,37:295,39:296,54:115,58:$Vz,61:$VA,65:285,66:297,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM},{26:[1,298],40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq},{26:[1,299],40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq},o($VI,[2,127]),{26:[1,300]},o($VI,[2,130]),o($VZ,[2,86]),{29:[1,301]},o($VZ,[2,89]),{6:287,7:286,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,30:288,31:289,32:290,33:291,34:292,35:293,36:294,37:295,39:296,54:115,58:$Vz,61:$VA,65:302,66:297,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM},{29:[2,98]},o($V_,[2,111],{10:7,13:113,54:115,7:286,6:287,30:288,31:289,32:290,33:291,34:292,35:293,36:294,37:295,39:296,66:297,65:303,11:$Vx,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM}),o($V_,[2,112],{10:7,13:113,54:115,7:286,6:287,30:288,31:289,32:290,33:291,34:292,35:293,36:294,37:295,39:296,66:297,65:304,11:$Vx,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM}),o($V_,[2,113],{10:7,13:113,54:115,7:286,6:287,30:288,31:289,32:290,33:291,34:292,35:293,36:294,37:295,39:296,66:297,65:305,11:$Vx,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM}),o($V_,[2,114],{10:7,13:113,54:115,7:286,6:287,30:288,31:289,32:290,33:291,34:292,35:293,36:294,37:295,39:296,66:297,65:306,11:$Vx,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM}),o($V_,[2,115],{10:7,13:113,54:115,7:286,6:287,30:288,31:289,32:290,33:291,34:292,35:293,36:294,37:295,39:296,66:297,65:307,11:$Vx,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM}),o($V_,[2,116],{10:7,13:113,54:115,7:286,6:287,30:288,31:289,32:290,33:291,34:292,35:293,36:294,37:295,39:296,66:297,65:308,11:$Vx,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM}),o($V_,[2,117],{10:7,13:113,54:115,7:286,6:287,30:288,31:289,32:290,33:291,34:292,35:293,36:294,37:295,39:296,66:297,65:309,11:$Vx,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM}),o($V_,[2,118],{10:7,13:113,54:115,7:286,6:287,30:288,31:289,32:290,33:291,34:292,35:293,36:294,37:295,39:296,66:297,65:310,11:$Vx,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM}),o($V_,[2,119],{10:7,13:113,54:115,7:286,6:287,30:288,31:289,32:290,33:291,34:292,35:293,36:294,37:295,39:296,66:297,65:311,11:$Vx,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM}),o($V_,[2,120],{10:7,13:113,54:115,7:286,6:287,30:288,31:289,32:290,33:291,34:292,35:293,36:294,37:295,39:296,66:297,65:312,11:$Vx,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM}),o($V_,[2,121],{10:7,13:113,54:115,7:286,6:287,30:288,31:289,32:290,33:291,34:292,35:293,36:294,37:295,39:296,66:297,65:313,11:$Vx,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM}),o($V_,[2,122],{10:7,13:113,54:115,7:286,6:287,30:288,31:289,32:290,33:291,34:292,35:293,36:294,37:295,39:296,66:297,65:314,11:$Vx,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,58:$Vz,61:$VA,68:$VB,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM}),{27:[1,315]},{27:[1,316]},o($VI,[2,129]),o($VZ,[2,88]),{29:[2,97],62:318,63:$VX,66:317,67:$VY,76:$VM},o($V$,[2,99]),o($V$,[2,100]),o($V$,[2,101]),o($V$,[2,102]),o($V$,[2,103]),o($V$,[2,104]),o($V$,[2,105]),o($V$,[2,106]),o($V$,[2,107]),o($V$,[2,108]),o($V$,[2,109]),o($V$,[2,110]),{6:179,7:178,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[1,320],30:180,31:181,32:182,33:183,34:184,35:185,36:186,37:187,39:188,54:115,58:$Vz,61:$VA,66:189,68:$VB,69:319,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM,77:190,78:$VN},{6:179,7:178,10:7,11:$Vx,13:113,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[1,322],30:180,31:181,32:182,33:183,34:184,35:185,36:186,37:187,39:188,54:115,58:$Vz,61:$VA,66:189,68:$VB,69:321,70:$VC,71:$VD,72:$VE,73:$VF,75:$VG,76:$VM,77:190,78:$VN},{29:[2,96],62:323,63:$VX,67:$VY},{29:[2,95]},{29:[1,324]},o($VI,[2,125]),{29:[1,325]},o($VI,[2,126]),{29:[2,94]},o($VI,[2,123]),o($VI,[2,124])],
defaultActions: {12:[2,12],13:[2,13],14:[2,14],15:[2,15],16:[2,16],17:[2,1],18:[2,2],19:[2,3],20:[2,4],21:[2,5],112:[2,61],134:[2,40],135:[2,41],136:[2,42],137:[2,43],138:[2,44],139:[2,45],140:[2,46],141:[2,47],142:[2,48],143:[2,49],144:[2,50],157:[2,38],220:[2,139],221:[2,140],222:[2,141],223:[2,142],224:[2,143],225:[2,144],226:[2,145],227:[2,146],228:[2,147],229:[2,148],230:[2,149],231:[2,150],232:[2,151],285:[2,98],318:[2,95],323:[2,94]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    const sentenciasAPI = require('./sentencias').sentenciasAPI;

    let htmlRecolectado = "";

    let tablaVariables = [];

    let tablaErroresLexicos = [];

    let tablaErroresSintacticos = [];

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:console.log('const'); return 19;
break;
case 4:console.log('if'); return 58;
break;
case 5:console.log('else'); return 60;
break;
case 6:console.log('switch'); return 61;
break;
case 7:console.log('case'); return 63;
break;
case 8:console.log('break'); return 76;
break;
case 9:console.log('default'); return 67;
break;
case 10:console.log('for'); return 68;
break;
case 11:console.log('while'); return 70;
break;
case 12:console.log('do'); return 71;
break;
case 13:console.log('continue'); return 78;
break;
case 14:console.log('void'); return 23;
break;
case 15:console.log('return'); return 73;
break;
case 16:console.log('call'); return 'R_CALL';
break;
case 17:console.log('null'); return 'R_NULL';
break;
case 18:console.log('println'); return 'R_PRINTLN';
break;
case 19:console.log('print'); return 72;
break;
case 20:console.log('typeof'); return 75;
break;
case 21:console.log('int'); return 14;
break;
case 22:console.log('double'); return 15;
break;
case 23:console.log('char'); return 16;
break;
case 24:console.log('boolean'); return 17;
break;
case 25:console.log('String'); return 18;
break;
case 26:console.log('('); return 24;
break;
case 27:console.log(')'); return 26;
break;
case 28:console.log('{'); return 27;
break;
case 29:console.log('}'); return 29;
break;
case 30:console.log('++'); return 47;
break;
case 31:console.log('--'); return 48;
break;
case 32:console.log('**'); return 42;
break;
case 33:console.log('=='); return 88;
break;
case 34:console.log('>='); return 84;
break;
case 35:console.log('<='); return 85;
break;
case 36:console.log('!='); return 89;
break;
case 37:console.log('||'); return 81;
break;
case 38:console.log('&&'); return 80;
break;
case 39:console.log('+'); return 41;
break;
case 40:console.log('-'); return 40;
break;
case 41:console.log('*'); return 45;
break;
case 42:console.log('/'); return 43;
break;
case 43:console.log('%'); return 44;
break;
case 44:console.log('>'); return 86;
break;
case 45:console.log('<'); return 87;
break;
case 46:console.log('^'); return 82;
break;
case 47:console.log('!'); return 83;
break;
case 48:console.log(':'); return 64;
break;
case 49:console.log(';'); return 22;
break;
case 50:console.log(','); return 12;
break;
case 51:console.log('='); return 20;
break;
case 52:console.log('cadena'); return 51; 
break;
case 53:console.log('decimal'); return 50; 
break;
case 54:console.log('numero'); return 49;
break;
case 55:console.log('identificador'); return 11; 
break;
case 56:console.log('booleando'); return 53;
break;
case 57:console.log('caracter'); return 52;
break;
case 58:return 5;   
break;
case 59: 
                        tablaErroresLexicos.push({'lexico':yy_.yytext,'linea':yy_.yylloc.first_line,'columna':yy_.yylloc.first_column});  
                        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                        
                    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:call\b)/i,/^(?:null\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:typeof\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:String\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*\*)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\^)/i,/^(?:!)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:=)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:true|false\b)/i,/^(?:['][^\']['])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}