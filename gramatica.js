/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,12],$V2=[1,13],$V3=[1,14],$V4=[1,15],$V5=[1,16],$V6=[1,8],$V7=[1,11],$V8=[1,29],$V9=[1,28],$Va=[2,11],$Vb=[1,36],$Vc=[1,32],$Vd=[1,34],$Ve=[1,35],$Vf=[1,37],$Vg=[1,38],$Vh=[1,39],$Vi=[1,40],$Vj=[1,41],$Vk=[20,22],$Vl=[1,52],$Vm=[1,53],$Vn=[1,54],$Vo=[1,55],$Vp=[1,56],$Vq=[1,57],$Vr=[22,26,40,41,42,43,44,45,64,80,81,82,84,85,86,87,88,89],$Vs=[5,11,14,15,16,17,18,19,23,29,38,58,61,63,64,67,68,70,71,72,73,75,76,78],$Vt=[1,80],$Vu=[22,26,40,41,64,80,81,82,84,85,86,87,88,89],$Vv=[22,26,64,80,81,82,84,85,86,87,88,89],$Vw=[22,26,40,41,43,45,64,80,81,82,84,85,86,87,88,89],$Vx=[1,105],$Vy=[1,116],$Vz=[1,109],$VA=[1,110],$VB=[1,111],$VC=[1,112],$VD=[1,113],$VE=[1,115],$VF=[1,114],$VG=[5,11,14,15,16,17,18,19,23],$VH=[11,14,15,16,17,18,19,29,38,58,61,63,67,68,70,71,72,73,75,76,78],$VI=[1,138],$VJ=[1,161],$VK=[1,160],$VL=[1,178],$VM=[1,179],$VN=[11,14,15,16,17,18,19,29,58,61,63,67,68,70,71,72,73,75,76,78],$VO=[26,64],$VP=[1,198],$VQ=[1,199],$VR=[1,200],$VS=[1,201],$VT=[1,202],$VU=[1,203],$VV=[1,231],$VW=[26,64,80,81,82],$VX=[2,173],$VY=[1,249],$VZ=[1,250],$V_=[11,14,15,16,17,18,19,29,38,58,60,61,63,67,68,70,71,72,73,75,76,78],$V$=[29,63,67],$V01=[29,63,67,76];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"sentencias_iniciales":4,"EOF":5,"asignacion":6,"declaracion":7,"metodo":8,"funcion":9,"lista_id":10,"IDENTIFICADOR":11,"R_COMA":12,"tipo_dato":13,"R_INT":14,"R_DOUBLE":15,"R_CHAR":16,"R_BOOLEAN":17,"R_STRING":18,"R_CONST":19,"R_IGUAL_ASIG":20,"expresion":21,"R_PUNTOCOMA":22,"R_VOID":23,"R_PIZ":24,"parametros":25,"R_PDER":26,"R_LIZ":27,"sentencias_metodos_funciones":28,"R_LDER":29,"control_if":30,"control_switch":31,"sentencia_for":32,"sentencia_while":33,"sentencia_do_while":34,"sentencia_imprimir":35,"sentencia_imprimir_ln":36,"sentencia_tipo_de":37,"sentencias_return":38,"sentencia_return":39,"R_RESTA":40,"R_SUMA":41,"R_POTENCIA":42,"R_DIVISION":43,"R_MODULO":44,"R_POR":45,"valor":46,"R_AUMENTO":47,"R_DECREMENTO":48,"ENTERO":49,"DECIMAL":50,"CADENA":51,"CARACTER":52,"BOOLEANO":53,"if":54,"control_else_if":55,"else_if":56,"else":57,"R_IF":58,"condiciones":59,"R_ELSE":60,"R_SWITCH":61,"lista_casos":62,"R_CASE":63,"R_DOSPUNTOS":64,"sentencias_switch":65,"sentencia_break":66,"R_DEFAULT":67,"R_FOR":68,"sentencias_ciclos":69,"R_WHILE":70,"R_DO":71,"R_PRINT":72,"R_RETURN":73,"sentencia_return_funcion":74,"R_TYPEOF":75,"R_BREAK":76,"sentencia_continue":77,"R_CONTINUE":78,"condicion":79,"R_YCONDICIONAL":80,"R_OCONDICIONAL":81,"R_XOR":82,"R_NEGADO":83,"R_MAYORIGUAL":84,"R_MENORIGUAL":85,"R_MAYOR":86,"R_MENOR":87,"R_IGUALCOMPARATIVO":88,"R_NOIGUAL":89,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"IDENTIFICADOR",12:"R_COMA",14:"R_INT",15:"R_DOUBLE",16:"R_CHAR",17:"R_BOOLEAN",18:"R_STRING",19:"R_CONST",20:"R_IGUAL_ASIG",22:"R_PUNTOCOMA",23:"R_VOID",24:"R_PIZ",26:"R_PDER",27:"R_LIZ",29:"R_LDER",38:"sentencias_return",40:"R_RESTA",41:"R_SUMA",42:"R_POTENCIA",43:"R_DIVISION",44:"R_MODULO",45:"R_POR",47:"R_AUMENTO",48:"R_DECREMENTO",49:"ENTERO",50:"DECIMAL",51:"CADENA",52:"CARACTER",53:"BOOLEANO",58:"R_IF",60:"R_ELSE",61:"R_SWITCH",63:"R_CASE",64:"R_DOSPUNTOS",67:"R_DEFAULT",68:"R_FOR",70:"R_WHILE",71:"R_DO",72:"R_PRINT",73:"R_RETURN",75:"R_TYPEOF",76:"R_BREAK",78:"R_CONTINUE",80:"R_YCONDICIONAL",81:"R_OCONDICIONAL",82:"R_XOR",83:"R_NEGADO",84:"R_MAYORIGUAL",85:"R_MENORIGUAL",86:"R_MAYOR",87:"R_MENOR",88:"R_IGUALCOMPARATIVO",89:"R_NOIGUAL"},
productions_: [0,[3,2],[4,2],[4,2],[4,2],[4,2],[4,1],[4,1],[4,1],[4,1],[10,3],[10,1],[13,1],[13,1],[13,1],[13,1],[13,1],[7,6],[7,5],[7,4],[7,3],[7,6],[7,5],[7,4],[7,3],[6,4],[8,8],[8,7],[8,7],[8,6],[9,8],[9,7],[9,7],[9,6],[25,4],[25,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,2],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,1],[21,1],[46,2],[46,2],[46,2],[46,2],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[30,1],[30,2],[55,2],[55,1],[55,1],[54,7],[54,6],[56,8],[56,7],[57,4],[57,3],[31,7],[31,6],[62,6],[62,5],[62,5],[62,4],[62,3],[65,2],[65,2],[65,2],[65,2],[65,2],[65,2],[65,2],[65,2],[65,2],[65,2],[65,2],[65,2],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[32,11],[32,11],[32,10],[32,10],[33,7],[33,6],[34,8],[34,7],[35,5],[36,5],[39,2],[74,3],[37,5],[37,4],[66,2],[77,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,2],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[59,3],[59,3],[59,3],[59,2],[59,3],[59,1],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    
    
    var aux2 = tablaErroresLexicos;
    var aux3 = tablaErroresSintacticos;
    var aux4 = tablaVariables;
    htmlRecolectado = "";
    tablaErroresLexicos = [];
    tablaErroresSintacticos = [];
    tablaVariables = [];

    if(aux2.length || aux3.length){
        return {"html":aux,"ast":null,"erroresLexicos":aux2,"erroresSintacticos":aux3,"tablaVariables":null};
    }

       return {"ast":$$[$0-1],"erroresLexicos":aux2,"erroresSintacticos":aux3,"tablaVariables":aux4};    
        return $$[$0-1] 
    
break;
case 2: case 3: case 4: case 5:
$$[$0].push($$[$0-1]); this.$ = $$[$0]; 
break;
case 6: case 7: case 8: case 9:
this.$ = [$$[$0]];
break;
case 10:
 $$[$0].push($$[$0-2]); $$[$0].push($$[$0-1]); this.$ = $$[$0] ;
break;
case 11: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 80: case 81: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114: case 115: case 116: case 117: case 118: case 148: case 149: case 150: case 151: case 152: case 153: case 154: case 155: case 156: case 157: case 158: case 159: case 160:
 this.$ = [$$[$0]]; 
break;
case 12: case 13: case 14: case 15: case 16: case 71: case 72: case 73: case 74: case 75: case 77:
 this.$ = $$[$0]; 
break;
case 17: case 21:

            tablaVariables.push({'constante':$$[$0-5],'tipo':$$[$0-4],'identificadores':$$[$0-3],'linea':this._$.first_line});
            this.$ = sentenciasAPI.declaracionConstanteConAsignacion($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
        
break;
case 18: case 22:

            tablaVariables.push({'tipo':$$[$0-4],'identificadores':$$[$0-3],'linea':this._$.first_line});
            this.$ = sentenciasAPI.declaracionConAsignacion($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
        
break;
case 19: case 23:

            tablaVariables.push({'constante':$$[$0-3], 'tipo':$$[$0-2],'identificadores':$$[$0-1],'linea':this._$.first_line});
            this.$ = sentenciasAPI.declaracionConstanteSimple($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]);
        
break;
case 20: case 24:

            tablaVariables.push({'tipo':$$[$0-2],'identificadores':$$[$0-1],'linea':this._$.first_line});
            this.$ = sentenciasAPI.declaracionSimple($$[$0-2],$$[$0-1],$$[$0]);
        
break;
case 25:
 
    this.$ = sentenciasAPI.asignacion($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 26:
 this.$ = sentenciasAPI.metodo($$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 27:
 this.$ = sentenciasAPI.metodo($$[$0-6],$$[$0-5],$$[$0-4],null,$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 28:
 this.$ = sentenciasAPI.metodo($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 29:
 this.$ = sentenciasAPI.metodo($$[$0-5],$$[$0-4],$$[$0-3],null,$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 30:
 this.$ = sentenciasAPI.funcion($$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 31:
 this.$ = sentenciasAPI.funcion($$[$0-6],$$[$0-5],$$[$0-4],null,$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 32:
 this.$ = sentenciasAPI.funcion($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 33:
 this.$ = sentenciasAPI.funcion($$[$0-5],$$[$0-4],$$[$0-3],null,$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 34:
 $$[$0].push($$[$0-3]); $$[$0].push($$[$0-2]); this.$ = $$[$0] 
break;
case 35:
 this.$ = [$$[$0-1],$$[$0]];
break;
case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 79: case 95: case 96: case 97: case 98: case 99: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 135: case 136: case 137: case 138: case 139: case 140: case 141: case 142: case 143: case 144: case 145: case 146: case 147:
 $$[$0].push($$[$0-1]); this.$ = $$[$0]; 
break;
case 58: case 59: case 60: case 61: case 62: case 63:
 this.$ = sentenciasAPI.expresionOperacion($$[$0-2],$$[$0-1],$$[$0]); 
break;
case 64:
 this.$ = sentenciasAPI.expresionParentesis($$[$0-2],$$[$0-1],$$[$0]); 
break;
case 65: case 66:
 this.$ = $$[$0];
break;
case 67: case 68: case 69: case 70:
 this.$ = [$$[$0-1],$$[$0]]
break;
case 76:
 this.$ = $$[$0];  
break;
case 78:
 this.$ = [$$[$0-1],$$[$0]]; 
break;
case 82:
 this.$ = sentenciasAPI.ifSimple($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 83:
 this.$ = sentenciasAPI.ifSimple($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 84:
 this.$ = sentenciasAPI.elseIfSimple($$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 85:
 this.$ = sentenciasAPI.elseIfSimple($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 86:
 this.$ = sentenciasAPI.elseSimple($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 87:
 this.$ = sentenciasAPI.elseSimple($$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 88:
 this.$ = sentenciasAPI.controlSwitch($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 89:
 this.$ = sentenciasAPI.controlSwitch($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 90:
 $$[$0].push(sentenciasAPI.casoSimple($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1])); this.$ = $$[$0]; 
break;
case 91:
 $$[$0].push(sentenciasAPI.casoSimple($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null)); this.$ = $$[$0] 
break;
case 92:
 this.$ = sentenciasAPI.casoSimple($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 93:
 this.$ = sentenciasAPI.casoSimple($$[$0-3],$$[$0-2],$$[$0-1],$$[$0],null); 
break;
case 94:
 this.$ = sentenciasAPI.defaultSimple($$[$0-2],$$[$0-1],$$[$0]); 
break;
case 119:
 this.$ = sentenciasAPI.cicloFor($$[$0-10],$$[$0-9],$$[$0-8],null,$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 120:
 this.$ = sentenciasAPI.cicloFor($$[$0-10],$$[$0-9],null,$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 121:
 this.$ = sentenciasAPI.cicloFor($$[$0-9],$$[$0-8],$$[$0-7],null,$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 122:
 this.$ = sentenciasAPI.cicloFor($$[$0-9],$$[$0-8],null,$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 123:
 this.$ = sentenciasAPI.cicloWhile($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 124:
 this.$ = sentenciasAPI.cicloWhile($$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 125:
 this.$ = sentenciasAPI.cicloDoWhile($$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 126:
 this.$ = sentenciasAPI.cicloDoWhile($$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],null,$$[$0]); 
break;
case 127: case 128:
 this.$ = sentenciasAPI.sentenciaImprimir($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 129:
 this.$ = sentenciasAPI.sentenciaReturn($$[$0-1],$$[$0]); 
break;
case 130:
 this.$ = sentenciasAPI.returnFuncion($$[$0-2],$$[$0-1],$$[$0]); 
break;
case 131:
 this.$ = sentenciasAPI.returnFuncion($$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 132:
 this.$ = sentenciasAPI.returnFuncion($$[$0-3],$$[$0-2],$$[$0-1],$$[$0]); 
break;
case 133:
 this.$ = sentenciasAPI.sentenciaBreak($$[$0-1],$$[$0]); 
break;
case 134:
 this.$ = sentenciasAPI.sentenciaContinue($$[$0-1],$$[$0]); 
break;
case 161: case 162: case 163:
 this.$ = sentenciasAPI.condicionesOperacion($$[$0-2],$$[$0-1],$$[$0]); 
break;
case 164:
 this.$ = sentenciasAPI.condicionesNegacion($$[$0-1],$$[$0]); 
break;
case 165:
 this.$ = sentenciasAPI.condicionesParentesis($$[$0-2],$$[$0-1],$$[$0]); 
break;
case 166:
 this.$ =  $$[$0]; 
break;
case 167: case 168: case 169: case 170: case 171: case 172:
 this.$ = sentenciasAPI.condicionComparacion($$[$0-2],$$[$0-1],$$[$0]); 
break;
case 173:
 this.$ = sentenciasAPI.condicionNegada($$[$0-1],$$[$0]); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,23:$V7},{1:[3]},{5:[1,17]},{4:18,5:[2,6],6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,23:$V7},{4:19,5:[2,7],6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,23:$V7},{4:20,5:[2,8],6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,23:$V7},{4:21,5:[2,9],6:3,7:4,8:5,9:6,10:7,11:$V0,13:9,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,23:$V7},{20:[1,22]},{11:[1,24],13:23,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5},{10:25,11:[1,26]},{10:27,11:$V8,12:$V9,20:$Va},{11:[1,30]},{11:[2,12]},{11:[2,13]},{11:[2,14]},{11:[2,15]},{11:[2,16]},{1:[2,1]},{5:[2,2]},{5:[2,3]},{5:[2,4]},{5:[2,5]},{11:$Vb,21:31,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},{10:42,11:$V8},{10:43,11:$V8},{20:[1,44],22:[1,45]},o($Vk,$Va,{12:$V9,24:[1,46]}),{20:[1,47],22:[1,48]},{10:49,11:$V8},o($Vk,$Va,{12:$V9}),{24:[1,50]},{22:[1,51],40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq},{11:$Vb,21:58,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},o($Vr,[2,65]),{11:[1,59]},{11:[1,60]},o($Vr,[2,74],{47:[1,61],48:[1,62]}),o($Vr,[2,71]),o($Vr,[2,72]),o($Vr,[2,73]),o($Vr,[2,75]),o($Vr,[2,76]),{20:[1,63],22:[1,64]},{20:[1,65],22:[1,66]},{11:$Vb,21:67,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},o($Vs,[2,20]),{13:70,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,25:68,26:[1,69]},{11:$Vb,21:71,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},o($Vs,[2,24]),o($Vk,[2,10]),{13:70,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,25:72,26:[1,73]},o($Vs,[2,25]),{11:$Vb,21:74,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},{11:$Vb,21:75,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},{11:$Vb,21:76,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},{11:$Vb,21:77,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},{11:$Vb,21:78,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},{11:$Vb,21:79,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},{26:$Vt,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq},o($Vr,[2,67]),o($Vr,[2,68]),o($Vr,[2,69]),o($Vr,[2,70]),{11:$Vb,21:81,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},o($Vs,[2,19]),{11:$Vb,21:82,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},o($Vs,[2,23]),{22:[1,83],40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq},{26:[1,84]},{27:[1,85]},{11:[1,86]},{22:[1,87],40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq},{26:[1,88]},{27:[1,89]},o($Vu,[2,58],{42:$Vn,43:$Vo,44:$Vp,45:$Vq}),o($Vu,[2,59],{42:$Vn,43:$Vo,44:$Vp,45:$Vq}),o($Vv,[2,60],{40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq}),o($Vw,[2,61],{42:$Vn,44:$Vp}),o($Vv,[2,62],{40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq}),o($Vw,[2,63],{42:$Vn,44:$Vp}),o($Vr,[2,64]),{22:[1,90],40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq},{22:[1,91],40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq},o($Vs,[2,18]),{27:[1,92]},{6:96,7:95,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:93,29:[1,94],30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:$Vx,39:106,54:108,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF},{12:[1,117],26:[2,35]},o($Vs,[2,22]),{27:[1,118]},{6:96,7:95,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:119,29:[1,120],30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:$Vx,39:106,54:108,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF},o($Vs,[2,17]),o($Vs,[2,21]),{6:96,7:95,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:121,29:[1,122],30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:$Vx,39:106,54:108,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF},{29:[1,123]},o($VG,[2,33]),{6:96,7:95,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:124,29:[2,47],30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:$Vx,39:106,54:108,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF},{6:96,7:95,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:125,29:[2,48],30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:$Vx,39:106,54:108,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF},{6:96,7:95,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:126,29:[2,49],30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:$Vx,39:106,54:108,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF},{6:96,7:95,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:127,29:[2,50],30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:$Vx,39:106,54:108,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF},{6:96,7:95,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:128,29:[2,51],30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:$Vx,39:106,54:108,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF},{6:96,7:95,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:129,29:[2,52],30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:$Vx,39:106,54:108,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF},{6:96,7:95,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:130,29:[2,53],30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:$Vx,39:106,54:108,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF},{6:96,7:95,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:131,29:[2,54],30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:$Vx,39:106,54:108,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF},{6:96,7:95,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:132,29:[2,55],30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:$Vx,39:106,54:108,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF},{6:96,7:95,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:133,29:[2,56],30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:$Vx,39:106,54:108,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF},{6:96,7:95,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:134,30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:$Vx,39:106,54:108,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF},{29:[2,57]},{10:25,11:$V8},o($VH,[2,77],{55:135,56:136,57:137,60:$VI}),{27:[1,139]},{24:[1,140]},{24:[1,141]},{27:[1,142]},{24:[1,143]},{24:[1,144]},{22:[1,145]},{24:[1,146]},{13:70,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,25:147},{6:96,7:95,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:148,29:[1,149],30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:$Vx,39:106,54:108,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF},{29:[1,150]},o($VG,[2,29]),{29:[1,151]},o($VG,[2,32]),o($VG,[2,31]),{29:[2,36]},{29:[2,37]},{29:[2,38]},{29:[2,39]},{29:[2,40]},{29:[2,41]},{29:[2,42]},{29:[2,43]},{29:[2,44]},{29:[2,45]},{29:[2,46]},o($VH,[2,78]),o($VH,[2,80],{56:136,57:137,55:152,60:$VI}),o($VH,[2,81]),{27:[1,154],58:[1,153]},{11:$Vb,21:155,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},{6:157,7:156,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6},{11:$Vb,21:162,24:$VJ,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,59:158,79:159,83:$VK},{6:166,7:165,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[1,164],30:167,31:168,32:169,33:170,34:171,35:172,36:173,37:174,39:175,54:108,58:$Vy,61:$Vz,66:176,68:$VA,69:163,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL,77:177,78:$VM},{11:$Vb,21:180,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},{11:$Vb,21:181,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},o($VN,[2,129]),{11:$Vb,21:162,24:$VJ,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,59:182,79:159,83:$VK},{26:[2,34]},{29:[1,183]},o($VG,[2,28]),o($VG,[2,27]),o($VG,[2,30]),o($VH,[2,79]),{24:[1,184]},{6:96,7:95,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:185,29:[1,186],30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:$Vx,39:106,54:108,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF},{26:[1,187],40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq},{64:[1,188]},{64:[1,189]},{26:[1,190]},o($VO,[2,166],{80:[1,191],81:[1,192],82:[1,193]}),{11:$Vb,21:195,24:$VJ,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,59:194,79:159,83:$VK},{11:$Vb,21:197,24:$VJ,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,59:196,79:159,83:$VK},{40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU},{29:[1,204]},{70:[1,205]},{6:166,7:165,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,148],30:167,31:168,32:169,33:170,34:171,35:172,36:173,37:174,39:175,54:108,58:$Vy,61:$Vz,66:176,68:$VA,69:206,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL,77:177,78:$VM},{6:166,7:165,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,149],30:167,31:168,32:169,33:170,34:171,35:172,36:173,37:174,39:175,54:108,58:$Vy,61:$Vz,66:176,68:$VA,69:207,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL,77:177,78:$VM},{6:166,7:165,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,150],30:167,31:168,32:169,33:170,34:171,35:172,36:173,37:174,39:175,54:108,58:$Vy,61:$Vz,66:176,68:$VA,69:208,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL,77:177,78:$VM},{6:166,7:165,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,151],30:167,31:168,32:169,33:170,34:171,35:172,36:173,37:174,39:175,54:108,58:$Vy,61:$Vz,66:176,68:$VA,69:209,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL,77:177,78:$VM},{6:166,7:165,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,152],30:167,31:168,32:169,33:170,34:171,35:172,36:173,37:174,39:175,54:108,58:$Vy,61:$Vz,66:176,68:$VA,69:210,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL,77:177,78:$VM},{6:166,7:165,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,153],30:167,31:168,32:169,33:170,34:171,35:172,36:173,37:174,39:175,54:108,58:$Vy,61:$Vz,66:176,68:$VA,69:211,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL,77:177,78:$VM},{6:166,7:165,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,154],30:167,31:168,32:169,33:170,34:171,35:172,36:173,37:174,39:175,54:108,58:$Vy,61:$Vz,66:176,68:$VA,69:212,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL,77:177,78:$VM},{6:166,7:165,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,155],30:167,31:168,32:169,33:170,34:171,35:172,36:173,37:174,39:175,54:108,58:$Vy,61:$Vz,66:176,68:$VA,69:213,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL,77:177,78:$VM},{6:166,7:165,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,156],30:167,31:168,32:169,33:170,34:171,35:172,36:173,37:174,39:175,54:108,58:$Vy,61:$Vz,66:176,68:$VA,69:214,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL,77:177,78:$VM},{6:166,7:165,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,157],30:167,31:168,32:169,33:170,34:171,35:172,36:173,37:174,39:175,54:108,58:$Vy,61:$Vz,66:176,68:$VA,69:215,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL,77:177,78:$VM},{6:166,7:165,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,158],30:167,31:168,32:169,33:170,34:171,35:172,36:173,37:174,39:175,54:108,58:$Vy,61:$Vz,66:176,68:$VA,69:216,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL,77:177,78:$VM},{6:166,7:165,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,159],30:167,31:168,32:169,33:170,34:171,35:172,36:173,37:174,39:175,54:108,58:$Vy,61:$Vz,66:176,68:$VA,69:217,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL,77:177,78:$VM},{6:166,7:165,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[2,160],30:167,31:168,32:169,33:170,34:171,35:172,36:173,37:174,39:175,54:108,58:$Vy,61:$Vz,66:176,68:$VA,69:218,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL,77:177,78:$VM},{22:[1,219]},{22:[1,220]},{26:[1,221],40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq},{26:[1,222],40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq},{26:[1,223]},o($VG,[2,26]),{11:$Vb,21:162,24:$VJ,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,59:224,79:159,83:$VK},{29:[1,225]},o($VH,[2,87]),{27:[1,226]},{11:$Vb,21:162,24:$VJ,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,59:227,79:159,83:$VK},{11:$Vb,21:162,24:$VJ,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,59:228,79:159,83:$VK},{27:[1,229]},{11:$Vb,21:162,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,79:230,83:$VV},{11:$Vb,21:162,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,79:232,83:$VV},{11:$Vb,21:162,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,79:233,83:$VV},o($VO,[2,164]),o($VW,$VX,{40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU}),{26:[1,234]},{26:$Vt,40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU},{11:$Vb,21:235,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},{11:$Vb,21:236,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},{11:$Vb,21:237,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},{11:$Vb,21:238,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},{11:$Vb,21:239,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},{11:$Vb,21:240,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},{70:[1,241]},{24:[1,242]},{29:[2,135]},{29:[2,136]},{29:[2,137]},{29:[2,138]},{29:[2,139]},{29:[2,140]},{29:[2,141]},{29:[2,142]},{29:[2,143]},{29:[2,144]},{29:[2,145]},{29:[2,146]},{29:[2,147]},o($VN,[2,133]),o([11,14,15,16,17,18,19,29,58,61,68,70,71,72,73,75,76,78],[2,134]),{22:[1,243]},o($VH,[2,132],{22:[1,244]}),{27:[1,245]},{26:[1,246]},o($VH,[2,86]),{29:[1,248],62:247,63:$VY,67:$VZ},{64:[1,251]},{64:[1,252]},{6:166,7:165,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[1,254],30:167,31:168,32:169,33:170,34:171,35:172,36:173,37:174,39:175,54:108,58:$Vy,61:$Vz,66:176,68:$VA,69:253,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL,77:177,78:$VM},o($VO,[2,161]),{11:$Vb,21:255,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},o($VO,[2,162]),o($VO,[2,163]),o($VO,[2,165]),o($VW,[2,167],{40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq}),o($VW,[2,168],{40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq}),o($VW,[2,169],{40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq}),o($VW,[2,170],{40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq}),o($VW,[2,171],{40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq}),o($VW,[2,172],{40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq}),{24:[1,256]},{11:$Vb,21:162,24:$VJ,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,59:257,79:159,83:$VK},o($VH,[2,127]),o($VH,[2,131]),{6:96,7:95,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:258,29:[1,259],30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:$Vx,39:106,54:108,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF},{27:[1,260]},{29:[1,261]},o($VH,[2,89]),{11:$Vb,21:262,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},{64:[1,263]},{11:$Vb,21:264,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},{11:$Vb,21:265,24:$Vc,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj},{29:[1,266]},o($VH,[2,124]),o($VO,$VX,{40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq}),{11:$Vb,21:162,24:$VJ,46:33,47:$Vd,48:$Ve,49:$Vf,50:$Vg,51:$Vh,52:$Vi,53:$Vj,59:267,79:159,83:$VK},{26:[1,268]},{29:[1,269]},o($V_,[2,83]),{6:96,7:95,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,28:270,29:[1,271],30:97,31:98,32:99,33:100,34:101,35:102,36:103,37:104,38:$Vx,39:106,54:108,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF},o($VH,[2,88]),{40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,64:[1,272]},{6:275,7:274,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,30:276,31:277,32:278,33:279,34:280,35:281,36:282,37:283,39:284,54:108,58:$Vy,61:$Vz,65:273,66:285,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL},{26:[1,286],40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq},{26:[1,287],40:$Vl,41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq},o($VH,[2,123]),{26:[1,288]},o($VH,[2,126]),o($V_,[2,82]),{29:[1,289]},o($V_,[2,85]),{6:275,7:274,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,30:276,31:277,32:278,33:279,34:280,35:281,36:282,37:283,39:284,54:108,58:$Vy,61:$Vz,65:290,66:285,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL},{29:[2,94]},o($V$,[2,107],{10:7,13:107,54:108,7:274,6:275,30:276,31:277,32:278,33:279,34:280,35:281,36:282,37:283,39:284,66:285,65:291,11:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL}),o($V$,[2,108],{10:7,13:107,54:108,7:274,6:275,30:276,31:277,32:278,33:279,34:280,35:281,36:282,37:283,39:284,66:285,65:292,11:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL}),o($V$,[2,109],{10:7,13:107,54:108,7:274,6:275,30:276,31:277,32:278,33:279,34:280,35:281,36:282,37:283,39:284,66:285,65:293,11:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL}),o($V$,[2,110],{10:7,13:107,54:108,7:274,6:275,30:276,31:277,32:278,33:279,34:280,35:281,36:282,37:283,39:284,66:285,65:294,11:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL}),o($V$,[2,111],{10:7,13:107,54:108,7:274,6:275,30:276,31:277,32:278,33:279,34:280,35:281,36:282,37:283,39:284,66:285,65:295,11:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL}),o($V$,[2,112],{10:7,13:107,54:108,7:274,6:275,30:276,31:277,32:278,33:279,34:280,35:281,36:282,37:283,39:284,66:285,65:296,11:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL}),o($V$,[2,113],{10:7,13:107,54:108,7:274,6:275,30:276,31:277,32:278,33:279,34:280,35:281,36:282,37:283,39:284,66:285,65:297,11:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL}),o($V$,[2,114],{10:7,13:107,54:108,7:274,6:275,30:276,31:277,32:278,33:279,34:280,35:281,36:282,37:283,39:284,66:285,65:298,11:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL}),o($V$,[2,115],{10:7,13:107,54:108,7:274,6:275,30:276,31:277,32:278,33:279,34:280,35:281,36:282,37:283,39:284,66:285,65:299,11:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL}),o($V$,[2,116],{10:7,13:107,54:108,7:274,6:275,30:276,31:277,32:278,33:279,34:280,35:281,36:282,37:283,39:284,66:285,65:300,11:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL}),o($V$,[2,117],{10:7,13:107,54:108,7:274,6:275,30:276,31:277,32:278,33:279,34:280,35:281,36:282,37:283,39:284,66:285,65:301,11:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL}),o($V$,[2,118],{10:7,13:107,54:108,7:274,6:275,30:276,31:277,32:278,33:279,34:280,35:281,36:282,37:283,39:284,66:285,65:302,11:$V0,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,58:$Vy,61:$Vz,68:$VA,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL}),{27:[1,303]},{27:[1,304]},o($VH,[2,125]),o($V_,[2,84]),{29:[2,93],62:306,63:$VY,66:305,67:$VZ,76:$VL},o($V01,[2,95]),o($V01,[2,96]),o($V01,[2,97]),o($V01,[2,98]),o($V01,[2,99]),o($V01,[2,100]),o($V01,[2,101]),o($V01,[2,102]),o($V01,[2,103]),o($V01,[2,104]),o($V01,[2,105]),o($V01,[2,106]),{6:166,7:165,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[1,308],30:167,31:168,32:169,33:170,34:171,35:172,36:173,37:174,39:175,54:108,58:$Vy,61:$Vz,66:176,68:$VA,69:307,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL,77:177,78:$VM},{6:166,7:165,10:7,11:$V0,13:107,14:$V1,15:$V2,16:$V3,17:$V4,18:$V5,19:$V6,29:[1,310],30:167,31:168,32:169,33:170,34:171,35:172,36:173,37:174,39:175,54:108,58:$Vy,61:$Vz,66:176,68:$VA,69:309,70:$VB,71:$VC,72:$VD,73:$VE,75:$VF,76:$VL,77:177,78:$VM},{29:[2,92],62:311,63:$VY,67:$VZ},{29:[2,91]},{29:[1,312]},o($VH,[2,121]),{29:[1,313]},o($VH,[2,122]),{29:[2,90]},o($VH,[2,119]),o($VH,[2,120])],
defaultActions: {12:[2,12],13:[2,13],14:[2,14],15:[2,15],16:[2,16],17:[2,1],18:[2,2],19:[2,3],20:[2,4],21:[2,5],106:[2,57],124:[2,36],125:[2,37],126:[2,38],127:[2,39],128:[2,40],129:[2,41],130:[2,42],131:[2,43],132:[2,44],133:[2,45],134:[2,46],147:[2,34],206:[2,135],207:[2,136],208:[2,137],209:[2,138],210:[2,139],211:[2,140],212:[2,141],213:[2,142],214:[2,143],215:[2,144],216:[2,145],217:[2,146],218:[2,147],273:[2,94],306:[2,91],311:[2,90]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    const sentenciasAPI = require('./sentencias').sentenciasAPI;

    let htmlRecolectado = "";

    let tablaVariables = [];

    let tablaErroresLexicos = [];

    let tablaErroresSintacticos = [];

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:console.log('const'); return 19;
break;
case 4:console.log('if'); return 58;
break;
case 5:console.log('else'); return 60;
break;
case 6:console.log('switch'); return 61;
break;
case 7:console.log('case'); return 63;
break;
case 8:console.log('break'); return 76;
break;
case 9:console.log('default'); return 67;
break;
case 10:console.log('for'); return 68;
break;
case 11:console.log('while'); return 70;
break;
case 12:console.log('do'); return 71;
break;
case 13:console.log('continue'); return 78;
break;
case 14:console.log('void'); return 23;
break;
case 15:console.log('return'); return 73;
break;
case 16:console.log('call'); return 'R_CALL';
break;
case 17:console.log('null'); return 'R_NULL';
break;
case 18:console.log('println'); return 'R_PRINTLN';
break;
case 19:console.log('print'); return 72;
break;
case 20:console.log('typeof'); return 75;
break;
case 21:console.log('int'); return 14;
break;
case 22:console.log('double'); return 15;
break;
case 23:console.log('char'); return 16;
break;
case 24:console.log('boolean'); return 17;
break;
case 25:console.log('String'); return 18;
break;
case 26:console.log('('); return 24;
break;
case 27:console.log(')'); return 26;
break;
case 28:console.log('{'); return 27;
break;
case 29:console.log('}'); return 29;
break;
case 30:console.log('++'); return 47;
break;
case 31:console.log('--'); return 48;
break;
case 32:console.log('**'); return 42;
break;
case 33:console.log('=='); return 88;
break;
case 34:console.log('>='); return 84;
break;
case 35:console.log('<='); return 85;
break;
case 36:console.log('!='); return 89;
break;
case 37:console.log('||'); return 81;
break;
case 38:console.log('&&'); return 80;
break;
case 39:console.log('+'); return 41;
break;
case 40:console.log('-'); return 40;
break;
case 41:console.log('*'); return 45;
break;
case 42:console.log('/'); return 43;
break;
case 43:console.log('%'); return 44;
break;
case 44:console.log('>'); return 86;
break;
case 45:console.log('<'); return 87;
break;
case 46:console.log('^'); return 82;
break;
case 47:console.log('!'); return 83;
break;
case 48:console.log(':'); return 64;
break;
case 49:console.log(';'); return 22;
break;
case 50:console.log(','); return 12;
break;
case 51:console.log('='); return 20;
break;
case 52:console.log('cadena'); return 51; 
break;
case 53:console.log('decimal'); return 50; 
break;
case 54:console.log('numero'); return 49;
break;
case 55:console.log('identificador'); return 11; 
break;
case 56:console.log('booleando'); return 53;
break;
case 57:console.log('caracter'); return 52;
break;
case 58:return 5;   
break;
case 59: 
                        tablaErroresLexicos.push({'lexico':yy_.yytext,'linea':yy_.yylloc.first_line,'columna':yy_.yylloc.first_column});  
                        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                        
                    
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:break\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:call\b)/i,/^(?:null\b)/i,/^(?:println\b)/i,/^(?:print\b)/i,/^(?:typeof\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:String\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*\*)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\^)/i,/^(?:!)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:=)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:true|false\b)/i,/^(?:['][^\']['])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}